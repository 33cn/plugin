// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hashlock.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	hashlock.proto

It has these top-level messages:
	Hashlock
	HashlockLock
	HashlockSend
	Hashlockquery
	HashRecv
	HashlockUnlock
	HashlockAction
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Hashlock struct {
	HashlockId    []byte `protobuf:"bytes,1,opt,name=hashlockId,proto3" json:"hashlockId,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	CreateTime    int64  `protobuf:"varint,3,opt,name=CreateTime" json:"CreateTime,omitempty"`
	ToAddress     string `protobuf:"bytes,4,opt,name=toAddress" json:"toAddress,omitempty"`
	ReturnAddress string `protobuf:"bytes,5,opt,name=returnAddress" json:"returnAddress,omitempty"`
	Amount        int64  `protobuf:"varint,6,opt,name=amount" json:"amount,omitempty"`
	Frozentime    int64  `protobuf:"varint,7,opt,name=frozentime" json:"frozentime,omitempty"`
}

func (m *Hashlock) Reset()                    { *m = Hashlock{} }
func (m *Hashlock) String() string            { return proto.CompactTextString(m) }
func (*Hashlock) ProtoMessage()               {}
func (*Hashlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Hashlock) GetHashlockId() []byte {
	if m != nil {
		return m.HashlockId
	}
	return nil
}

func (m *Hashlock) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hashlock) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hashlock) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *Hashlock) GetReturnAddress() string {
	if m != nil {
		return m.ReturnAddress
	}
	return ""
}

func (m *Hashlock) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Hashlock) GetFrozentime() int64 {
	if m != nil {
		return m.Frozentime
	}
	return 0
}

type HashlockLock struct {
	Amount    int64  `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Time      int64  `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Hash      []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	ToAddress string `protobuf:"bytes,4,opt,name=toAddress" json:"toAddress,omitempty"`
}

func (m *HashlockLock) Reset()                    { *m = HashlockLock{} }
func (m *HashlockLock) String() string            { return proto.CompactTextString(m) }
func (*HashlockLock) ProtoMessage()               {}
func (*HashlockLock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HashlockLock) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *HashlockLock) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HashlockLock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *HashlockLock) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

type HashlockSend struct {
	Secret []byte `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *HashlockSend) Reset()                    { *m = HashlockSend{} }
func (m *HashlockSend) String() string            { return proto.CompactTextString(m) }
func (*HashlockSend) ProtoMessage()               {}
func (*HashlockSend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HashlockSend) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

type Hashlockquery struct {
	Time        int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Status      int32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Amount      int64 `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	CreateTime  int64 `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	CurrentTime int64 `protobuf:"varint,5,opt,name=currentTime" json:"currentTime,omitempty"`
}

func (m *Hashlockquery) Reset()                    { *m = Hashlockquery{} }
func (m *Hashlockquery) String() string            { return proto.CompactTextString(m) }
func (*Hashlockquery) ProtoMessage()               {}
func (*Hashlockquery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Hashlockquery) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Hashlockquery) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Hashlockquery) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Hashlockquery) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Hashlockquery) GetCurrentTime() int64 {
	if m != nil {
		return m.CurrentTime
	}
	return 0
}

type HashRecv struct {
	HashlockId  []byte         `protobuf:"bytes,1,opt,name=HashlockId,proto3" json:"HashlockId,omitempty"`
	Information *Hashlockquery `protobuf:"bytes,2,opt,name=Information" json:"Information,omitempty"`
}

func (m *HashRecv) Reset()                    { *m = HashRecv{} }
func (m *HashRecv) String() string            { return proto.CompactTextString(m) }
func (*HashRecv) ProtoMessage()               {}
func (*HashRecv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HashRecv) GetHashlockId() []byte {
	if m != nil {
		return m.HashlockId
	}
	return nil
}

func (m *HashRecv) GetInformation() *Hashlockquery {
	if m != nil {
		return m.Information
	}
	return nil
}

type HashlockUnlock struct {
	Secret []byte `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *HashlockUnlock) Reset()                    { *m = HashlockUnlock{} }
func (m *HashlockUnlock) String() string            { return proto.CompactTextString(m) }
func (*HashlockUnlock) ProtoMessage()               {}
func (*HashlockUnlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HashlockUnlock) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

// message for hashlock
type HashlockAction struct {
	// Types that are valid to be assigned to Value:
	//	*HashlockAction_Hlock
	//	*HashlockAction_Hsend
	//	*HashlockAction_Hunlock
	Value isHashlockAction_Value `protobuf_oneof:"value"`
	Ty    int32                  `protobuf:"varint,4,opt,name=ty" json:"ty,omitempty"`
}

func (m *HashlockAction) Reset()                    { *m = HashlockAction{} }
func (m *HashlockAction) String() string            { return proto.CompactTextString(m) }
func (*HashlockAction) ProtoMessage()               {}
func (*HashlockAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isHashlockAction_Value interface {
	isHashlockAction_Value()
}

type HashlockAction_Hlock struct {
	Hlock *HashlockLock `protobuf:"bytes,1,opt,name=hlock,oneof"`
}
type HashlockAction_Hsend struct {
	Hsend *HashlockSend `protobuf:"bytes,2,opt,name=hsend,oneof"`
}
type HashlockAction_Hunlock struct {
	Hunlock *HashlockUnlock `protobuf:"bytes,3,opt,name=hunlock,oneof"`
}

func (*HashlockAction_Hlock) isHashlockAction_Value()   {}
func (*HashlockAction_Hsend) isHashlockAction_Value()   {}
func (*HashlockAction_Hunlock) isHashlockAction_Value() {}

func (m *HashlockAction) GetValue() isHashlockAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HashlockAction) GetHlock() *HashlockLock {
	if x, ok := m.GetValue().(*HashlockAction_Hlock); ok {
		return x.Hlock
	}
	return nil
}

func (m *HashlockAction) GetHsend() *HashlockSend {
	if x, ok := m.GetValue().(*HashlockAction_Hsend); ok {
		return x.Hsend
	}
	return nil
}

func (m *HashlockAction) GetHunlock() *HashlockUnlock {
	if x, ok := m.GetValue().(*HashlockAction_Hunlock); ok {
		return x.Hunlock
	}
	return nil
}

func (m *HashlockAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HashlockAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HashlockAction_OneofMarshaler, _HashlockAction_OneofUnmarshaler, _HashlockAction_OneofSizer, []interface{}{
		(*HashlockAction_Hlock)(nil),
		(*HashlockAction_Hsend)(nil),
		(*HashlockAction_Hunlock)(nil),
	}
}

func _HashlockAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HashlockAction)
	// value
	switch x := m.Value.(type) {
	case *HashlockAction_Hlock:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hlock); err != nil {
			return err
		}
	case *HashlockAction_Hsend:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hsend); err != nil {
			return err
		}
	case *HashlockAction_Hunlock:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hunlock); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HashlockAction.Value has unexpected type %T", x)
	}
	return nil
}

func _HashlockAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HashlockAction)
	switch tag {
	case 1: // value.hlock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockLock)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hlock{msg}
		return true, err
	case 2: // value.hsend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockSend)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hsend{msg}
		return true, err
	case 3: // value.hunlock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HashlockUnlock)
		err := b.DecodeMessage(msg)
		m.Value = &HashlockAction_Hunlock{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HashlockAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HashlockAction)
	// value
	switch x := m.Value.(type) {
	case *HashlockAction_Hlock:
		s := proto.Size(x.Hlock)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashlockAction_Hsend:
		s := proto.Size(x.Hsend)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashlockAction_Hunlock:
		s := proto.Size(x.Hunlock)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Hashlock)(nil), "types.Hashlock")
	proto.RegisterType((*HashlockLock)(nil), "types.HashlockLock")
	proto.RegisterType((*HashlockSend)(nil), "types.HashlockSend")
	proto.RegisterType((*Hashlockquery)(nil), "types.Hashlockquery")
	proto.RegisterType((*HashRecv)(nil), "types.HashRecv")
	proto.RegisterType((*HashlockUnlock)(nil), "types.HashlockUnlock")
	proto.RegisterType((*HashlockAction)(nil), "types.HashlockAction")
}

func init() { proto.RegisterFile("hashlock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcf, 0x8e, 0x9b, 0x30,
	0x10, 0xc6, 0x63, 0x12, 0x92, 0x66, 0x48, 0x72, 0x70, 0xff, 0x88, 0x43, 0x55, 0x21, 0x54, 0x55,
	0x48, 0x95, 0x22, 0x35, 0x95, 0x7a, 0x4f, 0x7b, 0x21, 0x52, 0x4f, 0x6e, 0xf7, 0x01, 0x08, 0x38,
	0x4a, 0xb4, 0xc4, 0xce, 0x1a, 0x13, 0x89, 0x7d, 0x8f, 0x7d, 0x95, 0x7d, 0x9c, 0x7d, 0x96, 0x95,
	0x07, 0x58, 0x13, 0xf6, 0xcf, 0x0d, 0x7f, 0xfc, 0x98, 0x6f, 0xe6, 0x1b, 0x03, 0x8b, 0x7d, 0x52,
	0xec, 0x73, 0x99, 0x5e, 0x2f, 0x4f, 0x4a, 0x6a, 0x49, 0x5d, 0x5d, 0x9d, 0x78, 0x11, 0x3e, 0x10,
	0x78, 0x17, 0x37, 0x6f, 0xe8, 0x17, 0x80, 0x96, 0xda, 0x64, 0x3e, 0x09, 0x48, 0x34, 0x63, 0x1d,
	0x85, 0x7e, 0x82, 0x71, 0xa1, 0x13, 0x5d, 0x16, 0xbe, 0x13, 0x90, 0xc8, 0x65, 0xcd, 0xc9, 0x7c,
	0xf7, 0x47, 0xf1, 0x44, 0xf3, 0xff, 0x87, 0x23, 0xf7, 0x87, 0x01, 0x89, 0x86, 0xac, 0xa3, 0xd0,
	0xcf, 0x30, 0xd5, 0x72, 0x9d, 0x65, 0x8a, 0x17, 0x85, 0x3f, 0x0a, 0x48, 0x34, 0x65, 0x56, 0xa0,
	0x5f, 0x61, 0xae, 0xb8, 0x2e, 0x95, 0x68, 0x09, 0x17, 0x89, 0x4b, 0xd1, 0x78, 0x27, 0x47, 0x59,
	0x0a, 0xed, 0x8f, 0xb1, 0x7e, 0x73, 0x32, 0xde, 0x3b, 0x25, 0x6f, 0xb9, 0xd0, 0xc6, 0x7b, 0x52,
	0x7b, 0x5b, 0x25, 0xcc, 0x61, 0xd6, 0xce, 0xf7, 0xd7, 0xcc, 0x68, 0xeb, 0x90, 0x8b, 0x3a, 0x14,
	0x46, 0x58, 0xc1, 0x41, 0x15, 0x9f, 0x8d, 0x66, 0xa6, 0xc7, 0x89, 0x66, 0x0c, 0x9f, 0xdf, 0x9e,
	0x25, 0xfc, 0x66, 0xdd, 0xfe, 0x71, 0x51, 0x27, 0xc6, 0x53, 0xc5, 0x75, 0x93, 0x66, 0x73, 0x0a,
	0xef, 0x08, 0xcc, 0x5b, 0xf0, 0xa6, 0xe4, 0xaa, 0x7a, 0xf2, 0x27, 0x1d, 0xff, 0xd7, 0xf2, 0xb6,
	0x33, 0x0c, 0xfb, 0x59, 0xa4, 0x76, 0x0f, 0xa3, 0x3a, 0x0b, 0xab, 0xd0, 0x00, 0xbc, 0xb4, 0x54,
	0x8a, 0x0b, 0x8d, 0x80, 0x8b, 0x40, 0x57, 0x0a, 0xb7, 0xf5, 0x6d, 0x60, 0x3c, 0x3d, 0x9b, 0x6a,
	0xf1, 0xb3, 0xdb, 0x60, 0x15, 0xfa, 0x0b, 0xbc, 0x8d, 0xd8, 0x49, 0x75, 0x4c, 0xf4, 0x41, 0x0a,
	0x6c, 0xd1, 0x5b, 0x7d, 0x58, 0xe2, 0xbd, 0x5a, 0x5e, 0x0c, 0xc7, 0xba, 0x60, 0x18, 0xc1, 0xa2,
	0x7d, 0x7b, 0x25, 0xf2, 0x66, 0x27, 0x2f, 0xa6, 0x74, 0x4f, 0x2c, 0xba, 0x4e, 0xcd, 0xc7, 0xf4,
	0x3b, 0xb8, 0x78, 0x44, 0xd2, 0x5b, 0xbd, 0xef, 0xd9, 0x99, 0x15, 0xc7, 0x03, 0x56, 0x33, 0x08,
	0x17, 0x5c, 0x64, 0x4d, 0x6f, 0x7d, 0xd8, 0x6c, 0x08, 0x61, 0xc3, 0xd0, 0x1f, 0x30, 0xd9, 0x97,
	0xd8, 0x0f, 0xa6, 0xea, 0xad, 0x3e, 0xf6, 0xf0, 0xba, 0xd9, 0x78, 0xc0, 0x5a, 0x8e, 0x2e, 0xc0,
	0xd1, 0x15, 0xe6, 0xec, 0x32, 0x47, 0x57, 0xbf, 0x27, 0xe0, 0x9e, 0x93, 0xbc, 0xe4, 0xdb, 0x31,
	0xfe, 0x63, 0x3f, 0x1f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x18, 0xf1, 0x3e, 0x75, 0x03, 0x00,
	0x00,
}
