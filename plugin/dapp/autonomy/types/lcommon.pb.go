// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lcommon.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VoteResult struct {
	// 总票数
	TotalVotes int32 `protobuf:"varint,1,opt,name=totalVotes" json:"totalVotes,omitempty"`
	// 赞成票
	ApproveVotes int32 `protobuf:"varint,2,opt,name=approveVotes" json:"approveVotes,omitempty"`
	// 反对票
	OpposeVotes int32 `protobuf:"varint,3,opt,name=opposeVotes" json:"opposeVotes,omitempty"`
	// 是否通过
	Pass bool `protobuf:"varint,4,opt,name=pass" json:"pass,omitempty"`
}

func (m *VoteResult) Reset()                    { *m = VoteResult{} }
func (m *VoteResult) String() string            { return proto.CompactTextString(m) }
func (*VoteResult) ProtoMessage()               {}
func (*VoteResult) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *VoteResult) GetTotalVotes() int32 {
	if m != nil {
		return m.TotalVotes
	}
	return 0
}

func (m *VoteResult) GetApproveVotes() int32 {
	if m != nil {
		return m.ApproveVotes
	}
	return 0
}

func (m *VoteResult) GetOpposeVotes() int32 {
	if m != nil {
		return m.OpposeVotes
	}
	return 0
}

func (m *VoteResult) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

type PublicVote struct {
	// 是否需要公示
	Publicity bool `protobuf:"varint,1,opt,name=publicity" json:"publicity,omitempty"`
	// 总票数
	TotalVotes int32 `protobuf:"varint,2,opt,name=totalVotes" json:"totalVotes,omitempty"`
	// 全体持票人反对票
	OpposeVotes int32 `protobuf:"varint,3,opt,name=opposeVotes" json:"opposeVotes,omitempty"`
	// 是否通过
	PubPass bool `protobuf:"varint,4,opt,name=pubPass" json:"pubPass,omitempty"`
}

func (m *PublicVote) Reset()                    { *m = PublicVote{} }
func (m *PublicVote) String() string            { return proto.CompactTextString(m) }
func (*PublicVote) ProtoMessage()               {}
func (*PublicVote) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PublicVote) GetPublicity() bool {
	if m != nil {
		return m.Publicity
	}
	return false
}

func (m *PublicVote) GetTotalVotes() int32 {
	if m != nil {
		return m.TotalVotes
	}
	return 0
}

func (m *PublicVote) GetOpposeVotes() int32 {
	if m != nil {
		return m.OpposeVotes
	}
	return 0
}

func (m *PublicVote) GetPubPass() bool {
	if m != nil {
		return m.PubPass
	}
	return false
}

type VotesRecord struct {
	Address []string `protobuf:"bytes,1,rep,name=address" json:"address,omitempty"`
}

func (m *VotesRecord) Reset()                    { *m = VotesRecord{} }
func (m *VotesRecord) String() string            { return proto.CompactTextString(m) }
func (*VotesRecord) ProtoMessage()               {}
func (*VotesRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *VotesRecord) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

type RuleConfig struct {
	// 参与率,以%为单位,只保留整数部分
	BoardAttendProb int32 `protobuf:"varint,1,opt,name=boardAttendProb" json:"boardAttendProb,omitempty"`
	// 通过率
	BoardPassProb int32 `protobuf:"varint,2,opt,name=boardPassProb" json:"boardPassProb,omitempty"`
	// 否决率
	OpposeProb int32 `protobuf:"varint,3,opt,name=opposeProb" json:"opposeProb,omitempty"`
	// 提案金额
	ProposalAmount int64 `protobuf:"varint,4,opt,name=proposalAmount" json:"proposalAmount,omitempty"`
	// 公示金额阈值
	PubAmountThreshold int64 `protobuf:"varint,5,opt,name=pubAmountThreshold" json:"pubAmountThreshold,omitempty"`
}

func (m *RuleConfig) Reset()                    { *m = RuleConfig{} }
func (m *RuleConfig) String() string            { return proto.CompactTextString(m) }
func (*RuleConfig) ProtoMessage()               {}
func (*RuleConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *RuleConfig) GetBoardAttendProb() int32 {
	if m != nil {
		return m.BoardAttendProb
	}
	return 0
}

func (m *RuleConfig) GetBoardPassProb() int32 {
	if m != nil {
		return m.BoardPassProb
	}
	return 0
}

func (m *RuleConfig) GetOpposeProb() int32 {
	if m != nil {
		return m.OpposeProb
	}
	return 0
}

func (m *RuleConfig) GetProposalAmount() int64 {
	if m != nil {
		return m.ProposalAmount
	}
	return 0
}

func (m *RuleConfig) GetPubAmountThreshold() int64 {
	if m != nil {
		return m.PubAmountThreshold
	}
	return 0
}

func init() {
	proto.RegisterType((*VoteResult)(nil), "types.VoteResult")
	proto.RegisterType((*PublicVote)(nil), "types.PublicVote")
	proto.RegisterType((*VotesRecord)(nil), "types.VotesRecord")
	proto.RegisterType((*RuleConfig)(nil), "types.RuleConfig")
}

func init() { proto.RegisterFile("lcommon.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcb, 0x4a, 0x33, 0x41,
	0x10, 0x85, 0x99, 0x5c, 0xfe, 0x3f, 0xa9, 0x18, 0x85, 0x5a, 0xcd, 0x42, 0x24, 0x0c, 0xa2, 0xb3,
	0xca, 0xc6, 0x27, 0x08, 0xbe, 0x40, 0x68, 0xc4, 0xfd, 0x74, 0xba, 0x35, 0x81, 0xce, 0x54, 0xd1,
	0x17, 0x21, 0x2f, 0xe0, 0x13, 0xfa, 0x40, 0xd2, 0x35, 0x09, 0xb9, 0x28, 0xb8, 0x9b, 0xf3, 0xcd,
	0x07, 0x73, 0x4e, 0x31, 0x30, 0x75, 0x2b, 0xda, 0x6e, 0xa9, 0x9d, 0xb3, 0xa7, 0x48, 0x38, 0x8c,
	0x3b, 0xb6, 0xa1, 0xfa, 0x2c, 0x00, 0x5e, 0x29, 0x5a, 0x65, 0x43, 0x72, 0x11, 0xef, 0x00, 0x22,
	0xc5, 0xc6, 0x65, 0x14, 0xca, 0x62, 0x56, 0xd4, 0x43, 0x75, 0x42, 0xb0, 0x82, 0xab, 0x86, 0xd9,
	0xd3, 0x87, 0xed, 0x8c, 0x9e, 0x18, 0x67, 0x0c, 0x67, 0x30, 0x21, 0x66, 0x0a, 0x7b, 0xa5, 0x2f,
	0xca, 0x29, 0x42, 0x84, 0x01, 0x37, 0x21, 0x94, 0x83, 0x59, 0x51, 0x8f, 0x94, 0x3c, 0x4b, 0x91,
	0x65, 0xd2, 0x6e, 0xb3, 0xca, 0x0e, 0xde, 0xc2, 0x98, 0x25, 0x6d, 0xe2, 0x4e, 0x7a, 0x8c, 0xd4,
	0x11, 0x5c, 0xd4, 0xec, 0xfd, 0xa8, 0xf9, 0x77, 0x85, 0x12, 0xfe, 0x73, 0xd2, 0xcb, 0x63, 0x8b,
	0x43, 0xac, 0x1e, 0x61, 0x22, 0x8a, 0xb2, 0x2b, 0xf2, 0x26, 0x8b, 0x8d, 0x31, 0xde, 0x86, 0x7c,
	0x8e, 0x7e, 0x3d, 0x56, 0x87, 0x58, 0x7d, 0x15, 0x00, 0x2a, 0x39, 0xfb, 0x4c, 0xed, 0xdb, 0xe6,
	0x1d, 0x6b, 0xb8, 0xd1, 0xd4, 0x78, 0xb3, 0x88, 0xd1, 0xb6, 0x66, 0xe9, 0x49, 0xef, 0xef, 0x77,
	0x89, 0xf1, 0x1e, 0xa6, 0x82, 0xf2, 0xe7, 0xc4, 0xeb, 0x06, 0x9c, 0xc3, 0xbc, 0xb1, 0x2b, 0x2c,
	0x4a, 0x37, 0xe1, 0x84, 0xe0, 0x03, 0x5c, 0xb3, 0x27, 0xa6, 0xd0, 0xb8, 0xc5, 0x96, 0x52, 0x1b,
	0x65, 0x48, 0x5f, 0x5d, 0x50, 0x9c, 0x03, 0x72, 0xd2, 0x5d, 0x78, 0x59, 0x7b, 0x1b, 0xd6, 0xe4,
	0x4c, 0x39, 0x14, 0xf7, 0x97, 0x37, 0xfa, 0x9f, 0xfc, 0x1f, 0x4f, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x8a, 0x95, 0x5e, 0xd6, 0x30, 0x02, 0x00, 0x00,
}
