// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rule.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AutonomyProposalRule struct {
	PropRule *ProposalRule `protobuf:"bytes,1,opt,name=propRule" json:"propRule,omitempty"`
	// 全体持票人投票结果
	Res *VoteResult `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
	// 状态
	Status int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (m *AutonomyProposalRule) Reset()                    { *m = AutonomyProposalRule{} }
func (m *AutonomyProposalRule) String() string            { return proto.CompactTextString(m) }
func (*AutonomyProposalRule) ProtoMessage()               {}
func (*AutonomyProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AutonomyProposalRule) GetPropRule() *ProposalRule {
	if m != nil {
		return m.PropRule
	}
	return nil
}

func (m *AutonomyProposalRule) GetRes() *VoteResult {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *AutonomyProposalRule) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ProposalRule struct {
	// 提案时间
	Year  int32 `protobuf:"varint,1,opt,name=year" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day" json:"day,omitempty"`
	// 可修改项
	BoardAttendProb    int32 `protobuf:"varint,4,opt,name=boardAttendProb" json:"boardAttendProb,omitempty"`
	BoardPassProb      int32 `protobuf:"varint,5,opt,name=boardPassProb" json:"boardPassProb,omitempty"`
	OpposeProb         int32 `protobuf:"varint,6,opt,name=opposeProb" json:"opposeProb,omitempty"`
	ProposalAmount     int32 `protobuf:"varint,7,opt,name=proposalAmount" json:"proposalAmount,omitempty"`
	PubAmountThreshold int32 `protobuf:"varint,8,opt,name=pubAmountThreshold" json:"pubAmountThreshold,omitempty"`
	// 投票相关
	StartBlockHeight   int64 `protobuf:"varint,9,opt,name=startBlockHeight" json:"startBlockHeight,omitempty"`
	EndBlockHeight     int64 `protobuf:"varint,10,opt,name=endBlockHeight" json:"endBlockHeight,omitempty"`
	RealEndBlockHeight int64 `protobuf:"varint,11,opt,name=realEndBlockHeight" json:"realEndBlockHeight,omitempty"`
}

func (m *ProposalRule) Reset()                    { *m = ProposalRule{} }
func (m *ProposalRule) String() string            { return proto.CompactTextString(m) }
func (*ProposalRule) ProtoMessage()               {}
func (*ProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *ProposalRule) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

func (m *ProposalRule) GetMonth() int32 {
	if m != nil {
		return m.Month
	}
	return 0
}

func (m *ProposalRule) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

func (m *ProposalRule) GetBoardAttendProb() int32 {
	if m != nil {
		return m.BoardAttendProb
	}
	return 0
}

func (m *ProposalRule) GetBoardPassProb() int32 {
	if m != nil {
		return m.BoardPassProb
	}
	return 0
}

func (m *ProposalRule) GetOpposeProb() int32 {
	if m != nil {
		return m.OpposeProb
	}
	return 0
}

func (m *ProposalRule) GetProposalAmount() int32 {
	if m != nil {
		return m.ProposalAmount
	}
	return 0
}

func (m *ProposalRule) GetPubAmountThreshold() int32 {
	if m != nil {
		return m.PubAmountThreshold
	}
	return 0
}

func (m *ProposalRule) GetStartBlockHeight() int64 {
	if m != nil {
		return m.StartBlockHeight
	}
	return 0
}

func (m *ProposalRule) GetEndBlockHeight() int64 {
	if m != nil {
		return m.EndBlockHeight
	}
	return 0
}

func (m *ProposalRule) GetRealEndBlockHeight() int64 {
	if m != nil {
		return m.RealEndBlockHeight
	}
	return 0
}

type RevokeProposalRule struct {
	ProposalID string `protobuf:"bytes,1,opt,name=proposalID" json:"proposalID,omitempty"`
}

func (m *RevokeProposalRule) Reset()                    { *m = RevokeProposalRule{} }
func (m *RevokeProposalRule) String() string            { return proto.CompactTextString(m) }
func (*RevokeProposalRule) ProtoMessage()               {}
func (*RevokeProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *RevokeProposalRule) GetProposalID() string {
	if m != nil {
		return m.ProposalID
	}
	return ""
}

type VoteProposalRule struct {
	ProposalID string `protobuf:"bytes,1,opt,name=proposalID" json:"proposalID,omitempty"`
	Approve    bool   `protobuf:"varint,2,opt,name=approve" json:"approve,omitempty"`
}

func (m *VoteProposalRule) Reset()                    { *m = VoteProposalRule{} }
func (m *VoteProposalRule) String() string            { return proto.CompactTextString(m) }
func (*VoteProposalRule) ProtoMessage()               {}
func (*VoteProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *VoteProposalRule) GetProposalID() string {
	if m != nil {
		return m.ProposalID
	}
	return ""
}

func (m *VoteProposalRule) GetApprove() bool {
	if m != nil {
		return m.Approve
	}
	return false
}

type TerminateProposalRule struct {
	ProposalID string `protobuf:"bytes,1,opt,name=proposalID" json:"proposalID,omitempty"`
}

func (m *TerminateProposalRule) Reset()                    { *m = TerminateProposalRule{} }
func (m *TerminateProposalRule) String() string            { return proto.CompactTextString(m) }
func (*TerminateProposalRule) ProtoMessage()               {}
func (*TerminateProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *TerminateProposalRule) GetProposalID() string {
	if m != nil {
		return m.ProposalID
	}
	return ""
}

// receipt
type ReceiptProposalRule struct {
	Prev    *AutonomyProposalRule `protobuf:"bytes,1,opt,name=prev" json:"prev,omitempty"`
	Current *AutonomyProposalRule `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
}

func (m *ReceiptProposalRule) Reset()                    { *m = ReceiptProposalRule{} }
func (m *ReceiptProposalRule) String() string            { return proto.CompactTextString(m) }
func (*ReceiptProposalRule) ProtoMessage()               {}
func (*ReceiptProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *ReceiptProposalRule) GetPrev() *AutonomyProposalRule {
	if m != nil {
		return m.Prev
	}
	return nil
}

func (m *ReceiptProposalRule) GetCurrent() *AutonomyProposalRule {
	if m != nil {
		return m.Current
	}
	return nil
}

type LocalProposalRule struct {
	PropRule *AutonomyProposalRule `protobuf:"bytes,1,opt,name=propRule" json:"propRule,omitempty"`
	Comments []string              `protobuf:"bytes,2,rep,name=comments" json:"comments,omitempty"`
}

func (m *LocalProposalRule) Reset()                    { *m = LocalProposalRule{} }
func (m *LocalProposalRule) String() string            { return proto.CompactTextString(m) }
func (*LocalProposalRule) ProtoMessage()               {}
func (*LocalProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *LocalProposalRule) GetPropRule() *AutonomyProposalRule {
	if m != nil {
		return m.PropRule
	}
	return nil
}

func (m *LocalProposalRule) GetComments() []string {
	if m != nil {
		return m.Comments
	}
	return nil
}

// query
type ReplyQueryProposalRule struct {
	ProposalID string `protobuf:"bytes,1,opt,name=proposalID" json:"proposalID,omitempty"`
}

func (m *ReplyQueryProposalRule) Reset()                    { *m = ReplyQueryProposalRule{} }
func (m *ReplyQueryProposalRule) String() string            { return proto.CompactTextString(m) }
func (*ReplyQueryProposalRule) ProtoMessage()               {}
func (*ReplyQueryProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *ReplyQueryProposalRule) GetProposalID() string {
	if m != nil {
		return m.ProposalID
	}
	return ""
}

type ReplyProposalRule struct {
	PropRules []*LocalProposalRule `protobuf:"bytes,1,rep,name=propRules" json:"propRules,omitempty"`
}

func (m *ReplyProposalRule) Reset()                    { *m = ReplyProposalRule{} }
func (m *ReplyProposalRule) String() string            { return proto.CompactTextString(m) }
func (*ReplyProposalRule) ProtoMessage()               {}
func (*ReplyProposalRule) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *ReplyProposalRule) GetPropRules() []*LocalProposalRule {
	if m != nil {
		return m.PropRules
	}
	return nil
}

func init() {
	proto.RegisterType((*AutonomyProposalRule)(nil), "types.AutonomyProposalRule")
	proto.RegisterType((*ProposalRule)(nil), "types.ProposalRule")
	proto.RegisterType((*RevokeProposalRule)(nil), "types.RevokeProposalRule")
	proto.RegisterType((*VoteProposalRule)(nil), "types.VoteProposalRule")
	proto.RegisterType((*TerminateProposalRule)(nil), "types.TerminateProposalRule")
	proto.RegisterType((*ReceiptProposalRule)(nil), "types.ReceiptProposalRule")
	proto.RegisterType((*LocalProposalRule)(nil), "types.LocalProposalRule")
	proto.RegisterType((*ReplyQueryProposalRule)(nil), "types.ReplyQueryProposalRule")
	proto.RegisterType((*ReplyProposalRule)(nil), "types.ReplyProposalRule")
}

func init() { proto.RegisterFile("rule.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4d, 0x6b, 0xdb, 0x4c,
	0x10, 0xc7, 0xd1, 0x23, 0xcb, 0x2f, 0xe3, 0x27, 0xad, 0xbd, 0x49, 0x83, 0x48, 0x21, 0x18, 0xb5,
	0x14, 0xd1, 0x83, 0x0b, 0xe9, 0x4b, 0x7a, 0x75, 0x69, 0xa1, 0xa5, 0x39, 0xb8, 0x4b, 0xe8, 0x7d,
	0x6d, 0x0f, 0x95, 0x89, 0xa4, 0x59, 0x76, 0x57, 0x06, 0x1d, 0x7a, 0xeb, 0x67, 0xe8, 0xe7, 0x2d,
	0x1a, 0xcb, 0x89, 0x65, 0x9b, 0x80, 0x6f, 0x3b, 0xff, 0xf9, 0xcd, 0x8b, 0x3c, 0x33, 0x06, 0x30,
	0x45, 0x8a, 0x63, 0x6d, 0xc8, 0x91, 0x08, 0x5c, 0xa9, 0xd1, 0x5e, 0x9c, 0xa4, 0x73, 0xca, 0x32,
	0xca, 0xd7, 0x6a, 0xf4, 0xc7, 0x83, 0xb3, 0x49, 0xe1, 0x28, 0xa7, 0xac, 0x9c, 0x1a, 0xd2, 0x64,
	0x55, 0x2a, 0x8b, 0x14, 0xc5, 0x1b, 0xe8, 0x6a, 0x43, 0xba, 0x7a, 0x87, 0xde, 0xc8, 0x8b, 0xfb,
	0x57, 0xa7, 0x63, 0xce, 0x30, 0xde, 0xc6, 0xe4, 0x3d, 0x24, 0x5e, 0x80, 0x6f, 0xd0, 0x86, 0xff,
	0x31, 0x3b, 0xac, 0xd9, 0x9f, 0xe4, 0x50, 0xa2, 0x2d, 0x52, 0x27, 0x2b, 0xaf, 0x38, 0x87, 0xb6,
	0x75, 0xca, 0x15, 0x36, 0xf4, 0x47, 0x5e, 0x1c, 0xc8, 0xda, 0x8a, 0xfe, 0xfa, 0xf0, 0x7f, 0xa3,
	0xbc, 0x80, 0x56, 0x89, 0xca, 0x70, 0xe9, 0x40, 0xf2, 0x5b, 0x9c, 0x41, 0x90, 0x51, 0xee, 0x12,
	0xae, 0x11, 0xc8, 0xb5, 0x21, 0x06, 0xe0, 0x2f, 0x54, 0x59, 0xe7, 0xab, 0x9e, 0x22, 0x86, 0xa7,
	0x33, 0x52, 0x66, 0x31, 0x71, 0x0e, 0xf3, 0xc5, 0xd4, 0xd0, 0x2c, 0x6c, 0xb1, 0x77, 0x57, 0x16,
	0x2f, 0xe1, 0x84, 0xa5, 0xa9, 0xb2, 0x96, 0xb9, 0x80, 0xb9, 0xa6, 0x28, 0x2e, 0x01, 0x48, 0x6b,
	0xb2, 0xc8, 0x48, 0x9b, 0x91, 0x2d, 0x45, 0xbc, 0x82, 0x27, 0xba, 0xee, 0x7d, 0x92, 0x51, 0x91,
	0xbb, 0xb0, 0xc3, 0xcc, 0x8e, 0x2a, 0xc6, 0x20, 0x74, 0x31, 0x5b, 0x1b, 0xb7, 0x89, 0x41, 0x9b,
	0x50, 0xba, 0x08, 0xbb, 0xcc, 0x1e, 0xf0, 0x88, 0xd7, 0x30, 0xb0, 0x4e, 0x19, 0xf7, 0x29, 0xa5,
	0xf9, 0xdd, 0x57, 0x5c, 0xfe, 0x4a, 0x5c, 0xd8, 0x1b, 0x79, 0xb1, 0x2f, 0xf7, 0xf4, 0xaa, 0x07,
	0xcc, 0x17, 0xdb, 0x24, 0x30, 0xb9, 0xa3, 0x56, 0x3d, 0x18, 0x54, 0xe9, 0x97, 0x26, 0xdb, 0x67,
	0xf6, 0x80, 0x27, 0x7a, 0x07, 0x42, 0xe2, 0x8a, 0xee, 0xb0, 0x31, 0x9d, 0x4b, 0x80, 0xcd, 0xb7,
	0x7d, 0xfb, 0xcc, 0x33, 0xea, 0xc9, 0x2d, 0x25, 0xba, 0x81, 0x41, 0x35, 0xf9, 0x63, 0x62, 0x44,
	0x08, 0x1d, 0xa5, 0xb5, 0xa1, 0x15, 0xf2, 0x7c, 0xbb, 0x72, 0x63, 0x46, 0xd7, 0xf0, 0xec, 0x16,
	0x4d, 0xb6, 0xcc, 0xd5, 0x71, 0x29, 0xa3, 0xdf, 0x70, 0x2a, 0x71, 0x8e, 0x4b, 0xed, 0x76, 0x56,
	0xbb, 0xa5, 0x0d, 0xae, 0xea, 0xb5, 0x7e, 0x5e, 0xaf, 0xea, 0xa1, 0x2b, 0x90, 0x0c, 0x8a, 0xf7,
	0xd0, 0x99, 0x17, 0xc6, 0x60, 0xee, 0xea, 0xf5, 0x7e, 0x34, 0x66, 0xc3, 0x46, 0x09, 0x0c, 0x6f,
	0x68, 0xae, 0xd2, 0x46, 0xf1, 0xeb, 0xbd, 0xbb, 0x7a, 0x34, 0xd9, 0xc3, 0x7d, 0x5d, 0x40, 0xb7,
	0xba, 0x5c, 0xcc, 0x5d, 0x75, 0x64, 0x7e, 0xdc, 0x93, 0xf7, 0x76, 0xf4, 0x11, 0xce, 0x25, 0xea,
	0xb4, 0xfc, 0x51, 0xa0, 0x29, 0x8f, 0xfa, 0x89, 0xbe, 0xc3, 0x90, 0x23, 0x1b, 0x41, 0x1f, 0xa0,
	0xb7, 0x29, 0x6b, 0x43, 0x6f, 0xe4, 0xc7, 0xfd, 0xab, 0xb0, 0x6e, 0x72, 0xef, 0x83, 0xe4, 0x03,
	0x3a, 0x6b, 0xf3, 0x7f, 0xca, 0xdb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x3e, 0x74, 0x94,
	0x77, 0x04, 0x00, 0x00,
}
