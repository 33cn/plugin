// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	config.proto
	f3d.proto

It has these top-level messages:
	Config
	Addr
	Bonus
	Time
	Key
	RoundInfo
	KeyInfo
	F3DAction
	F3DStart
	F3DLuckyDraw
	F3DBuyKey
	QueryF3DByRound
	QueryF3DListByRound
	QueryKeysByRoundAndAddr
	QueryKeyCountByRoundAndAddr
	F3DRecord
	ReplyF3DList
	ReplyF3D
	ReplyKeyList
	ReplyKey
	ReplyKeyCount
	ReceiptF3D
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Config struct {
	Addr  *Addr  `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Bonus *Bonus `protobuf:"bytes,2,opt,name=bonus" json:"bonus,omitempty"`
	Time  *Time  `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	Key   *Key   `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Config) GetAddr() *Addr {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Config) GetBonus() *Bonus {
	if m != nil {
		return m.Bonus
	}
	return nil
}

func (m *Config) GetTime() *Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Config) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type Addr struct {
	Manager   string `protobuf:"bytes,1,opt,name=manager" json:"manager,omitempty"`
	Developer string `protobuf:"bytes,2,opt,name=developer" json:"developer,omitempty"`
}

func (m *Addr) Reset()                    { *m = Addr{} }
func (m *Addr) String() string            { return proto.CompactTextString(m) }
func (*Addr) ProtoMessage()               {}
func (*Addr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Addr) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *Addr) GetDeveloper() string {
	if m != nil {
		return m.Developer
	}
	return ""
}

type Bonus struct {
	Winner    float32 `protobuf:"fixed32,1,opt,name=winner" json:"winner,omitempty"`
	Key       float32 `protobuf:"fixed32,2,opt,name=key" json:"key,omitempty"`
	Pool      float32 `protobuf:"fixed32,3,opt,name=pool" json:"pool,omitempty"`
	Developer float32 `protobuf:"fixed32,4,opt,name=developer" json:"developer,omitempty"`
}

func (m *Bonus) Reset()                    { *m = Bonus{} }
func (m *Bonus) String() string            { return proto.CompactTextString(m) }
func (*Bonus) ProtoMessage()               {}
func (*Bonus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Bonus) GetWinner() float32 {
	if m != nil {
		return m.Winner
	}
	return 0
}

func (m *Bonus) GetKey() float32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Bonus) GetPool() float32 {
	if m != nil {
		return m.Pool
	}
	return 0
}

func (m *Bonus) GetDeveloper() float32 {
	if m != nil {
		return m.Developer
	}
	return 0
}

type Time struct {
	Life   int64 `protobuf:"varint,1,opt,name=life" json:"life,omitempty"`
	Key    int64 `protobuf:"varint,2,opt,name=key" json:"key,omitempty"`
	Maxkey int64 `protobuf:"varint,3,opt,name=maxkey" json:"maxkey,omitempty"`
	Nouser int64 `protobuf:"varint,4,opt,name=nouser" json:"nouser,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Time) GetLife() int64 {
	if m != nil {
		return m.Life
	}
	return 0
}

func (m *Time) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Time) GetMaxkey() int64 {
	if m != nil {
		return m.Maxkey
	}
	return 0
}

func (m *Time) GetNouser() int64 {
	if m != nil {
		return m.Nouser
	}
	return 0
}

type Key struct {
	Start float32 `protobuf:"fixed32,1,opt,name=start" json:"start,omitempty"`
	Incr  float32 `protobuf:"fixed32,2,opt,name=incr" json:"incr,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Key) GetStart() float32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Key) GetIncr() float32 {
	if m != nil {
		return m.Incr
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "types.Config")
	proto.RegisterType((*Addr)(nil), "types.Addr")
	proto.RegisterType((*Bonus)(nil), "types.Bonus")
	proto.RegisterType((*Time)(nil), "types.Time")
	proto.RegisterType((*Key)(nil), "types.Key")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0x95, 0xd8, 0xc9, 0x5f, 0xb9, 0x76, 0xf8, 0xeb, 0x84, 0xaa, 0x0c, 0x95, 0x40, 0x99,
	0x98, 0x82, 0x04, 0x3b, 0x12, 0x30, 0x76, 0xb3, 0x18, 0x59, 0xd2, 0xe4, 0x5a, 0x59, 0x24, 0x76,
	0xe4, 0xa4, 0x40, 0xbe, 0x03, 0x1f, 0x1a, 0xf9, 0x6c, 0x44, 0xbb, 0xdd, 0xfb, 0xbd, 0xf3, 0xbd,
	0x17, 0x05, 0xd6, 0xad, 0x35, 0x07, 0x7d, 0xac, 0x47, 0x67, 0x67, 0x8b, 0xd9, 0xbc, 0x8c, 0x34,
	0x55, 0xdf, 0x09, 0xe4, 0x2f, 0xcc, 0xf1, 0x1a, 0x64, 0xd3, 0x75, 0xae, 0x4c, 0x6e, 0x92, 0xdb,
	0xd5, 0xfd, 0xaa, 0xe6, 0x85, 0xfa, 0xa9, 0xeb, 0x9c, 0x62, 0x03, 0x2b, 0xc8, 0xf6, 0xd6, 0x9c,
	0xa6, 0x32, 0xe5, 0x8d, 0x75, 0xdc, 0x78, 0xf6, 0x4c, 0x05, 0xcb, 0x1f, 0x99, 0xf5, 0x40, 0xa5,
	0xb8, 0x38, 0xf2, 0xaa, 0x07, 0x52, 0x6c, 0xe0, 0x16, 0xc4, 0x3b, 0x2d, 0xa5, 0x64, 0x1f, 0xa2,
	0xbf, 0xa3, 0x45, 0x79, 0x5c, 0x3d, 0x82, 0xf4, 0x81, 0x58, 0xc2, 0xbf, 0xa1, 0x31, 0xcd, 0x91,
	0x42, 0x9d, 0x42, 0xfd, 0x4a, 0xdc, 0x42, 0xd1, 0xd1, 0x07, 0xf5, 0x76, 0x24, 0xc7, 0x45, 0x0a,
	0xf5, 0x07, 0xaa, 0x16, 0x32, 0xae, 0x83, 0x1b, 0xc8, 0x3f, 0xb5, 0x31, 0xf1, 0x7d, 0xaa, 0xa2,
	0xc2, 0xff, 0x21, 0x3e, 0x65, 0xe8, 0x47, 0x44, 0x90, 0xa3, 0xb5, 0x3d, 0x37, 0x4e, 0x15, 0xcf,
	0x97, 0x21, 0x92, 0x8d, 0xb3, 0x90, 0x37, 0x90, 0xfe, 0x83, 0xfc, 0xcb, 0x5e, 0x1f, 0x88, 0x13,
	0x84, 0xe2, 0xf9, 0xfc, 0xbe, 0x08, 0xf7, 0x37, 0x90, 0x0f, 0xcd, 0x97, 0x87, 0x82, 0x61, 0x54,
	0x9e, 0x1b, 0x7b, 0x9a, 0x62, 0x80, 0x50, 0x51, 0x55, 0x77, 0x20, 0x76, 0xb4, 0xe0, 0x15, 0x64,
	0xd3, 0xdc, 0xb8, 0x39, 0xf6, 0x0f, 0xc2, 0x47, 0x6a, 0xd3, 0xba, 0xd8, 0x9f, 0xe7, 0x7d, 0xce,
	0x3f, 0xf4, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x99, 0x5e, 0xa8, 0xe0, 0x01, 0x00, 0x00,
}
