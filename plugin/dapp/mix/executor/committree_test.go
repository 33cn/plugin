// Copyright Fuzamei Corp. 2018 All Rights Reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package executor

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

/*
leaf0 = "16308793397024662832064523892418908145900866571524124093537199035808550255649"
hexstr 240e732fc90c3a88a11f3f60bbbe412f6b4b56d007cf34fdb2500195071c7c21

leaf1 = 21467822781369104390668289189963532506973289112396605437823854946060028754354
leaf hash 17799daf83d82530d70343bc44578bdabafcb134332d4949883695a1ec9d1ba9

leaf2= 4178471437305290899835614805415999986197321812505352791035422725360758750328
leaf hash 29ded1ba9ed45d829f458ce511e013a8d11058db9d6f03fea14267082087b151

leaf3= 10407830929890509544473717262275616077696950294748419792758056545898949331744
leaf hash 1b757026b07fd17150c5d23081bddd52e77dc26b0c7c46b4e0150ca7ccfed35a

leaf4= 11032604436245646157001636966356016502073301224837385665550497706958264582086
leaf hash 24a8d61af8e16abaf9ccb1051c882799121c6ece1094655b5b93f837aead2f30

 merkleroot= 6988991286454436061784929049510388415076132311642532433013500389938249229356
0 proof str= 21467822781369104390668289189963532506973289112396605437823854946060028754354
1 proof str= 12096317366724227951683802305909172775715878134489527031786909074403605889217
2 proof str= 14541527209424185878803689752018034974129079647509824805270353433359922459228
3 proof str= 16581570556767364549626991605903512613557832602774591000372759906303762837296
*/

func TestGetProveData(t *testing.T) {
	leaves := []string{
		"16308793397024662832064523892418908145900866571524124093537199035808550255649",
		"21467822781369104390668289189963532506973289112396605437823854946060028754354",
		"4178471437305290899835614805415999986197321812505352791035422725360758750328",
		"10407830929890509544473717262275616077696950294748419792758056545898949331744",
		"11032604436245646157001636966356016502073301224837385665550497706958264582086",
	}

	proves := []string{
		"21467822781369104390668289189963532506973289112396605437823854946060028754354",
		"12096317366724227951683802305909172775715878134489527031786909074403605889217",
		"14541527209424185878803689752018034974129079647509824805270353433359922459228",
		"16581570556767364549626991605903512613557832602774591000372759906303762837296",
	}

	var leave [][]byte
	for _, l := range leaves {
		leave = append(leave, transferFr2Bytes(l))
	}

	ret, err := getProveData(leave[1], leave)
	assert.Nil(t, err)
	assert.Equal(t, uint32(5), ret.NumLeaves)
	assert.Equal(t, uint32(1), ret.ProofIndex)
	assert.Equal(t, "6988991286454436061784929049510388415076132311642532433013500389938249229356", ret.RootHash)
	assert.Equal(t, len(proves), len(ret.ProofSet))
	for i, k := range proves {
		assert.Equal(t, k, ret.ProofSet[i])
	}
	assert.Equal(t, "0,1,1", ret.Helpers)

}
