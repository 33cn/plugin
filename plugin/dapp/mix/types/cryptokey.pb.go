// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: cryptokey.proto

package types

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//DH one time pubkey with secret
type DHSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneTimePubKey string `protobuf:"bytes,1,opt,name=oneTimePubKey,proto3" json:"oneTimePubKey,omitempty"`
	Secret        string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *DHSecret) Reset() {
	*x = DHSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHSecret) ProtoMessage() {}

func (x *DHSecret) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHSecret.ProtoReflect.Descriptor instead.
func (*DHSecret) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{0}
}

func (x *DHSecret) GetOneTimePubKey() string {
	if x != nil {
		return x.OneTimePubKey
	}
	return ""
}

func (x *DHSecret) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

//Diff-Helman 加密group, for spender, returner, authorizer to decrypt
type DHSecretGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver  string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Returner  string `protobuf:"bytes,2,opt,name=returner,proto3" json:"returner,omitempty"`
	Authorize string `protobuf:"bytes,3,opt,name=authorize,proto3" json:"authorize,omitempty"`
}

func (x *DHSecretGroup) Reset() {
	*x = DHSecretGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHSecretGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHSecretGroup) ProtoMessage() {}

func (x *DHSecretGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHSecretGroup.ProtoReflect.Descriptor instead.
func (*DHSecretGroup) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{1}
}

func (x *DHSecretGroup) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *DHSecretGroup) GetReturner() string {
	if x != nil {
		return x.Returner
	}
	return ""
}

func (x *DHSecretGroup) GetAuthorize() string {
	if x != nil {
		return x.Authorize
	}
	return ""
}

// note payment account
// receiveKey = hash(spendKey)
type NoteKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiveKey string `protobuf:"bytes,1,opt,name=receiveKey,proto3" json:"receiveKey,omitempty"`
	SpendKey   string `protobuf:"bytes,2,opt,name=spendKey,proto3" json:"spendKey,omitempty"`
}

func (x *NoteKeyPair) Reset() {
	*x = NoteKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteKeyPair) ProtoMessage() {}

func (x *NoteKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteKeyPair.ProtoReflect.Descriptor instead.
func (*NoteKeyPair) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{2}
}

func (x *NoteKeyPair) GetReceiveKey() string {
	if x != nil {
		return x.ReceiveKey
	}
	return ""
}

func (x *NoteKeyPair) GetSpendKey() string {
	if x != nil {
		return x.SpendKey
	}
	return ""
}

// diff-hellman crypto key pair
// secretPrivKey = wallet private key * G_25519
// secretPubKey  = secretPrivKey * G_25519
type EncryptSecretKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretPrivKey string `protobuf:"bytes,1,opt,name=secretPrivKey,proto3" json:"secretPrivKey,omitempty"`
	SecretPubKey  string `protobuf:"bytes,2,opt,name=secretPubKey,proto3" json:"secretPubKey,omitempty"`
}

func (x *EncryptSecretKeyPair) Reset() {
	*x = EncryptSecretKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptSecretKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptSecretKeyPair) ProtoMessage() {}

func (x *EncryptSecretKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptSecretKeyPair.ProtoReflect.Descriptor instead.
func (*EncryptSecretKeyPair) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptSecretKeyPair) GetSecretPrivKey() string {
	if x != nil {
		return x.SecretPrivKey
	}
	return ""
}

func (x *EncryptSecretKeyPair) GetSecretPubKey() string {
	if x != nil {
		return x.SecretPubKey
	}
	return ""
}

//spend pair for note proof
//crypt pair for DH crypt/decrypt
type AccountPrivacyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentKey *NoteKeyPair          `protobuf:"bytes,1,opt,name=paymentKey,proto3" json:"paymentKey,omitempty"`
	SecretKey  *EncryptSecretKeyPair `protobuf:"bytes,2,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
}

func (x *AccountPrivacyKey) Reset() {
	*x = AccountPrivacyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPrivacyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPrivacyKey) ProtoMessage() {}

func (x *AccountPrivacyKey) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPrivacyKey.ProtoReflect.Descriptor instead.
func (*AccountPrivacyKey) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{4}
}

func (x *AccountPrivacyKey) GetPaymentKey() *NoteKeyPair {
	if x != nil {
		return x.PaymentKey
	}
	return nil
}

func (x *AccountPrivacyKey) GetSecretKey() *EncryptSecretKeyPair {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

type WalletAddrPrivacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Privacy *AccountPrivacyKey `protobuf:"bytes,1,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Addr    string             `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *WalletAddrPrivacy) Reset() {
	*x = WalletAddrPrivacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletAddrPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletAddrPrivacy) ProtoMessage() {}

func (x *WalletAddrPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletAddrPrivacy.ProtoReflect.Descriptor instead.
func (*WalletAddrPrivacy) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{5}
}

func (x *WalletAddrPrivacy) GetPrivacy() *AccountPrivacyKey {
	if x != nil {
		return x.Privacy
	}
	return nil
}

func (x *WalletAddrPrivacy) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type SecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverKey  string `protobuf:"bytes,1,opt,name=receiverKey,proto3" json:"receiverKey,omitempty"`
	ReturnKey    string `protobuf:"bytes,2,opt,name=returnKey,proto3" json:"returnKey,omitempty"`
	AuthorizeKey string `protobuf:"bytes,3,opt,name=authorizeKey,proto3" json:"authorizeKey,omitempty"`
	Amount       string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	NoteRandom   string `protobuf:"bytes,5,opt,name=noteRandom,proto3" json:"noteRandom,omitempty"`
	AssetExec    string `protobuf:"bytes,6,opt,name=assetExec,proto3" json:"assetExec,omitempty"`
	AssetSymbol  string `protobuf:"bytes,7,opt,name=assetSymbol,proto3" json:"assetSymbol,omitempty"`
}

func (x *SecretData) Reset() {
	*x = SecretData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretData) ProtoMessage() {}

func (x *SecretData) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretData.ProtoReflect.Descriptor instead.
func (*SecretData) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{6}
}

func (x *SecretData) GetReceiverKey() string {
	if x != nil {
		return x.ReceiverKey
	}
	return ""
}

func (x *SecretData) GetReturnKey() string {
	if x != nil {
		return x.ReturnKey
	}
	return ""
}

func (x *SecretData) GetAuthorizeKey() string {
	if x != nil {
		return x.AuthorizeKey
	}
	return ""
}

func (x *SecretData) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *SecretData) GetNoteRandom() string {
	if x != nil {
		return x.NoteRandom
	}
	return ""
}

func (x *SecretData) GetAssetExec() string {
	if x != nil {
		return x.AssetExec
	}
	return ""
}

func (x *SecretData) GetAssetSymbol() string {
	if x != nil {
		return x.AssetSymbol
	}
	return ""
}

type EncryptSecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret           string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	PeerSecretPubKey string `protobuf:"bytes,2,opt,name=peerSecretPubKey,proto3" json:"peerSecretPubKey,omitempty"`
}

func (x *EncryptSecretData) Reset() {
	*x = EncryptSecretData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptSecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptSecretData) ProtoMessage() {}

func (x *EncryptSecretData) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptSecretData.ProtoReflect.Descriptor instead.
func (*EncryptSecretData) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{7}
}

func (x *EncryptSecretData) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *EncryptSecretData) GetPeerSecretPubKey() string {
	if x != nil {
		return x.PeerSecretPubKey
	}
	return ""
}

type DecryptSecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret        string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	SecretPriKey  string `protobuf:"bytes,2,opt,name=secretPriKey,proto3" json:"secretPriKey,omitempty"`
	OneTimePubKey string `protobuf:"bytes,3,opt,name=oneTimePubKey,proto3" json:"oneTimePubKey,omitempty"`
}

func (x *DecryptSecretData) Reset() {
	*x = DecryptSecretData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cryptokey_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptSecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptSecretData) ProtoMessage() {}

func (x *DecryptSecretData) ProtoReflect() protoreflect.Message {
	mi := &file_cryptokey_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptSecretData.ProtoReflect.Descriptor instead.
func (*DecryptSecretData) Descriptor() ([]byte, []int) {
	return file_cryptokey_proto_rawDescGZIP(), []int{8}
}

func (x *DecryptSecretData) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *DecryptSecretData) GetSecretPriKey() string {
	if x != nil {
		return x.SecretPriKey
	}
	return ""
}

func (x *DecryptSecretData) GetOneTimePubKey() string {
	if x != nil {
		return x.OneTimePubKey
	}
	return ""
}

var File_cryptokey_proto protoreflect.FileDescriptor

var file_cryptokey_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x44, 0x48, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x65, 0x0a, 0x0d, 0x44, 0x48, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x4e, 0x6f, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x4b, 0x65, 0x79, 0x22, 0x60, 0x0a, 0x14, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x5b, 0x0a, 0x11, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x12, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0xe8, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x22, 0x57, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x75, 0x0a, 0x11,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cryptokey_proto_rawDescOnce sync.Once
	file_cryptokey_proto_rawDescData = file_cryptokey_proto_rawDesc
)

func file_cryptokey_proto_rawDescGZIP() []byte {
	file_cryptokey_proto_rawDescOnce.Do(func() {
		file_cryptokey_proto_rawDescData = protoimpl.X.CompressGZIP(file_cryptokey_proto_rawDescData)
	})
	return file_cryptokey_proto_rawDescData
}

var file_cryptokey_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_cryptokey_proto_goTypes = []interface{}{
	(*DHSecret)(nil),             // 0: types.DHSecret
	(*DHSecretGroup)(nil),        // 1: types.DHSecretGroup
	(*NoteKeyPair)(nil),          // 2: types.NoteKeyPair
	(*EncryptSecretKeyPair)(nil), // 3: types.EncryptSecretKeyPair
	(*AccountPrivacyKey)(nil),    // 4: types.AccountPrivacyKey
	(*WalletAddrPrivacy)(nil),    // 5: types.WalletAddrPrivacy
	(*SecretData)(nil),           // 6: types.SecretData
	(*EncryptSecretData)(nil),    // 7: types.EncryptSecretData
	(*DecryptSecretData)(nil),    // 8: types.DecryptSecretData
}
var file_cryptokey_proto_depIdxs = []int32{
	2, // 0: types.AccountPrivacyKey.paymentKey:type_name -> types.NoteKeyPair
	3, // 1: types.AccountPrivacyKey.secretKey:type_name -> types.EncryptSecretKeyPair
	4, // 2: types.WalletAddrPrivacy.privacy:type_name -> types.AccountPrivacyKey
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cryptokey_proto_init() }
func file_cryptokey_proto_init() {
	if File_cryptokey_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cryptokey_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHSecretGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptSecretKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPrivacyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletAddrPrivacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptSecretData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cryptokey_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptSecretData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cryptokey_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cryptokey_proto_goTypes,
		DependencyIndexes: file_cryptokey_proto_depIdxs,
		MessageInfos:      file_cryptokey_proto_msgTypes,
	}.Build()
	File_cryptokey_proto = out.File
	file_cryptokey_proto_rawDesc = nil
	file_cryptokey_proto_goTypes = nil
	file_cryptokey_proto_depIdxs = nil
}
