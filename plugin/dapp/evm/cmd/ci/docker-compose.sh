#!/usr/bin/env bash

# debug mode
#set -x
# Exit immediately if a command exits with a non-zero status.
set -e
set -o pipefail
#set -o verbose
#set -o xtrace

# os: ubuntu18.04 x64
# first, you must install jq tool of json
# sudo apt-get install jq
# sudo apt-get install shellcheck, in order to static check shell script
# sudo apt-get install parallel
# ./docker-compose.sh build

PWD=$(cd "$(dirname "$0")" && pwd)
export PATH="$PWD:$PATH"

SOLO_NODE="${1}_main_1"
SOLO_CLI="docker exec ${SOLO_NODE} /root/chain33-cli --rpc_laddr http://localhost:8545"
Chain33_CLI="docker exec ${SOLO_NODE} /root/chain33-cli"
DAPP="evm"
evm_contractAddr=""
MAIN_HTTP=""
ETH_HTTP=""
# shellcheck disable=SC2034
CLI=$SOLO_CLI
containers=("${SOLO_NODE}")
export COMPOSE_PROJECT_NAME="$1"
## global config ###
sedfix=""
if [ "$(uname)" == "Darwin" ]; then
    sedfix=".bak"
fi

echo "=========== # env setting ============="
echo "COMPOSE_FILE=$COMPOSE_FILE"
echo "COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME"
echo "CLI=SOLO_CLI"
####################
#0xd83b69C56834E85e023B1738E69BFA2F0dd52905
genesisKey="c8729f05b10cc74d40feeb00376e11aa5b50e92b369d778b31b6e902c528f141"
genesisAddr="0xd83b69c56834e85e023b1738e69bfa2f0dd52905"
testAddr="0xDe79A84DD3A16BB91044167075dE17a1CA4b1d6b"


function set_main_config() {
    echo "====== ${FUNCNAME[0]} ======"
    conf="chain33.toml"
    sed -i $sedfix '0,/^Title.*/s//Title="local"/' "${conf}"
    sed -i $sedfix '0,/^CoinSymbol=.*/s//CoinSymbol="abc"/' "${conf}"
    #address defaultDriverb
     sed -i $sedfix '0,/^defaultDriver=.*/s//defaultDriver="eth"/' "${conf}"
    #blockchain singleMode
    sed -i $sedfix '0,/^singleMode=.*/s//singleMode=true/' "${conf}"
    # rpc
    sed -i $sedfix '0,/^whitelist=.*/s//whitelist=["*"]/' "${conf}"
    sed -i $sedfix '0,/^httpAddr=.*/s//httpAddr="0.0.0.0:8545"/' "${conf}"
    # evm ethMapFromSymbol addressDriver
    sed -i $sedfix '0,/^ethMapFromExecutor=.*/s//ethMapFromExecutor="coins"/' "${conf}"
    sed -i $sedfix '0,/^ethMapFromSymbol=.*/s//ethMapFromSymbol="abc"/' "${conf}"
    #consensus
    sed -i $sedfix '0,/^name="ticket"$/s//name="solo"/' "${conf}"
    #genesis
    sed -i $sedfix '0,/^genesis=.*/s//genesis="0xd83b69c56834e85e023b1738e69bfa2f0dd52905"/' "${conf}"

}

function start_docker() {
    echo "=========== # docker-compose ps ============="
    docker-compose ps

    # remove exsit container
    docker-compose down
    # create and run docker-compose container
    docker-compose up --build -d
    local SLEEP=5
    echo "=========== sleep ${SLEEP}s ============="
    sleep ${SLEEP}

    docker-compose ps
}
function check_docker_container() {
    echo "===== check_docker_container ======"
    for con in "${containers[@]}"; do
        runing=$(docker inspect "${con}" | jq '.[0].State.Running')
        if [ ! "${runing}" ]; then
            docker inspect "${con}"
            echo "check ${con} not actived!"
            exit 1
        fi
    done
}

function testcase_coinsTransfer(){
    echo "====== ${FUNCNAME[0]} start ======"
    #coins 转账
    #构造交易
    echo "============= create eth tx ============="
    echo "cli:${CLI}"
    rawTx=$(${CLI} coins transfer_eth -f ${genesisAddr}  -t ${testAddr} -a 12)
    echo "${rawTx}"
     #如果返回空
     if [ -z "${rawTx}" ]; then
        exit 1
     fi
     echo "============= sign eth tx ============="
     #签名交易
    signData=$(${CLI} wallet sign -d ${rawTx} -c 2999 -p 2 -k ${genesisKey})
    #如果返回空
     if [ -z "${signData}" ]; then
        exit 1
     fi
    echo "${signData}"
    echo "============= send eth tx ============="
    hash=$(${CLI} wallet send -d ${signData} -e)
    if [ -z "${signData}" ]; then
        exit 1
    fi
    echo "${hash}"

    balance=$(${Chain33_CLI} account balance -a ${testAddr} -e coins | jq -r ".balance")
    if [ "${balance}" != "12.0000" ]; then
        echo " balance  not correct, balance=${balance}"
        exit 1
    fi

    echo "^_^check eth-evm-coins transfer success! ^_^ "

}

function testcase_deployErc20(){
  echo "=========== #start deployErc20 contract ============="
  #name=XYZ
  #totalSupply=10000000000000
  #decimals=8
  abidata="0x60806040523480156200001157600080fd5b506040516200132138038062001321833981810160405260a08110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b506040526020018051906020019092919080519060200190929190805190602001909291905050508460039080519060200190620001ee92919062000278565b5083600490805190602001906200020792919062000278565b508260028190555080600560006101000a81548160ff021916908360ff160217905550826000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050506200032e565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620002b05760008555620002fc565b82601f10620002cb57805160ff1916838001178555620002fc565b82800160010185558215620002fc579182015b82811115620002fb578251825591602001919060010190620002de565b5b5090506200030b91906200030f565b5090565b5b808211156200032a57600081600090555060010162000310565b5090565b610fe3806200033e6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461025857806370a08231146102bc57806395d89b4114610314578063a457c2d714610397578063a9059cbb146103fb578063dd62ed3e1461045f576100a9565b806306fdde03146100ae578063095ea7b31461013157806318160ddd1461019557806323b872dd146101b3578063313ce56714610237575b600080fd5b6100b66104d7565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f65780820151818401526020810190506100db565b50505050905090810190601f1680156101235780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61017d6004803603604081101561014757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610579565b60405180821515815260200191505060405180910390f35b61019d610597565b6040518082815260200191505060405180910390f35b61021f600480360360608110156101c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105a1565b60405180821515815260200191505060405180910390f35b61023f6106af565b604051808260ff16815260200191505060405180910390f35b6102a46004803603604081101561026e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106c6565b60405180821515815260200191505060405180910390f35b6102fe600480360360208110156102d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610769565b6040518082815260200191505060405180910390f35b61031c6107b1565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103e3600480360360408110156103ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610853565b60405180821515815260200191505060405180910390f35b6104476004803603604081101561041157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610954565b60405180821515815260200191505060405180910390f35b6104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610972565b6040518082815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561056f5780601f106105445761010080835404028352916020019161056f565b820191906000526020600020905b81548152906001019060200180831161055257829003601f168201915b5050505050905090565b600061058d6105866109f9565b8484610a01565b6001905092915050565b6000600254905090565b60006105ae848484610bf8565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006105f96109f9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561068f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610f186028913960400191505060405180910390fd5b6106a38561069b6109f9565b858403610a01565b60019150509392505050565b6000600560009054906101000a900460ff16905090565b600061075f6106d36109f9565b8484600160006106e16109f9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401610a01565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b5050505050905090565b600080600160006108626109f9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610935576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610f896025913960400191505060405180910390fd5b6109496109406109f9565b85858403610a01565b600191505092915050565b60006109686109616109f9565b8484610bf8565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610f656024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610ed06022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610f406025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610ead6023913960400191505060405180910390fd5b610d0f838383610ea7565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610ef26026913960400191505060405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212207555d8d68d0c7caabd14018b8dc2c40954f86887323b0e017a3573920c4dc5bf64736f6c6343000706003300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000d83b69c56834e85e023b1738e69bfa2f0dd529050000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000358595a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000358595a0000000000000000000000000000000000000000000000000000000000"
   #构造交易
  echo "============= create eth deployErc20 tx  ============="
  rawTx=$(${CLI} coins transfer_eth -f ${genesisAddr}  -d abidata)
  echo "${rawTx}"
  #如果返回空
  if [ -z "${rawTx}" ]; then
        exit 1
  fi

  echo "============= sign eth tx ============="
  #签名交易
  signData=$(${CLI} wallet sign -d ${rawTx} -c 2999 -p 2 -k ${genesisKey})
  #如果返回空
  if [ -z "${signData}" ]; then
        exit 1
  fi

  echo "${signData}"
  echo "============= send eth tx ============="
  hash=$(${CLI} wallet send -d ${signData} -e)
  if [ -z "${signData}" ]; then
        exit 1
  fi
  echo "${hash}"

  #check tx status
  queryTransaction ${hash}  "jq -r .result.receipt.tyName" "ExecOk"

  res=$(curl -s --data-binary '{"jsonrpc":"2.0","id":2,"method":"eth_getContractorAddress","params":["from":"'"${genesisAddr}"'","nonce":1]}' -H 'content-type:text/plain;' "${ETH_HTTP}") | jq -r ".result"
  evm_contractAddr=$res
  echo evm_contractAddr
}

function testcase_evmPrecompile(){
  echo "=========== # evmPrecompile ============="
}


# 查询交易的执行结果
# 根据传入的规则，校验查询的结果 （参数1: 校验规则 参数2: 预期匹配结果）
function queryTransaction() {
    txhash=$1
    validators=$2
    expectRes=$3
    echo "txHash=${txHash}"

    res=$(curl -s --data-binary '{"jsonrpc":"2.0","id":2,"method":"Chain33.QueryTransaction","params":[{"hash":"'"${txHash}"'"}]}' -H 'content-type:text/plain;' "${MAIN_HTTP}")

    times=$(echo "${validators}" | awk -F '|' '{print NF}')
    for ((i = 1; i <= times; i++)); do
        validator=$(echo "${validators}" | awk -F '|' '{print $'"$i"'}')
        res=$(echo "${res}" | ${validator})
    done

    if [ "${res}" != "${expectRes}" ]; then
        return 1
    else
        return 0
    fi
}



function run_tesstcase(){
  testcase_coinsTransfer
  testcase_deployErc20

}
function main() {
     echo "====================DAPP=${DAPP} main begin==================="
    ### init config ####
    echo "#### set main_config"
    set_main_config
    ### start docker
    echo "#### start docker"
    start_docker
      ### test cases ###
    ip=$(${Chain33_CLI} net info | jq -r ".externalAddr")
    ip=$(echo "$ip" | cut -d':' -f 1)
    if [ "$ip" == "127.0.0.1" ]; then
        ip=$(${Chain33_CLI} net info | jq -r ".localAddr")
        ip=$(echo "$ip" | cut -d':' -f 1)
    fi
    MAIN_HTTP=http://${ip}:8801
    ETH_HTTP=http://${ip}:8545
    echo "main_http:${MAIN_HTTP}"
    run_tesstcase
    check_docker_container
    #finish
    echo "===============DAPP=$DAPP main end==============="
}

# start
main