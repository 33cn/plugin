// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fingerguessing.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	fingerguessing.proto

It has these top-level messages:
	Fingerguessing
	FingerguessingAction
	GameMatch
	GameCancel
	GameClose
	GameCreate
	QueryGameListByStatusAndAddr
	QueryGameListCount
	GameRecord
	QueryGameInfo
	QueryGameInfos
	ReplyGameList
	ReplyGameListCount
	ReplyGame
	ReceiptGame
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Fingerguessing struct {
	// 默认是由创建这局游戏的txHash作为gameId
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	// create 1 -> Match 2 -> Cancel 3 -> Close 4
	Status int32 `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	// 创建时间
	CreateTime int64 `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	// 匹配时间(何时参与游戏匹配）
	MatchTime int64 `protobuf:"varint,4,opt,name=matchTime" json:"matchTime,omitempty"`
	// 状态close的时间（包括cancel）
	Closetime int64 `protobuf:"varint,5,opt,name=closetime" json:"closetime,omitempty"`
	// 筹码
	Value int64 `protobuf:"varint,6,opt,name=value" json:"value,omitempty"`
	// 发起者账号地址
	CreateAddress string `protobuf:"bytes,7,opt,name=createAddress" json:"createAddress,omitempty"`
	// 对赌者账号地址
	MatchAddress string `protobuf:"bytes,8,opt,name=matchAddress" json:"matchAddress,omitempty"`
	// hash 类型，预留字段
	HashType string `protobuf:"bytes,9,opt,name=hashType" json:"hashType,omitempty"`
	// 庄家创建游戏时，庄家自己出拳结果加密后的hash值
	HashValue []byte `protobuf:"bytes,10,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
	// 用来公布庄家出拳结果的私钥
	Secret string `protobuf:"bytes,11,opt,name=secret" json:"secret,omitempty"`
	// 1 平局，2 庄家获胜，3 matcher获胜，4
	// 庄家开奖超时，matcher获胜，并获得本局所有赌资
	Result int32 `protobuf:"varint,12,opt,name=result" json:"result,omitempty"`
	// matcher 出拳结果
	MatcherGuess int32 `protobuf:"varint,13,opt,name=matcherGuess" json:"matcherGuess,omitempty"`
	// create txHash
	CreateTxHash string `protobuf:"bytes,14,opt,name=createTxHash" json:"createTxHash,omitempty"`
	// matche交易hash
	MatchTxHash string `protobuf:"bytes,15,opt,name=matchTxHash" json:"matchTxHash,omitempty"`
	// close txhash
	CloseTxHash string `protobuf:"bytes,16,opt,name=closeTxHash" json:"closeTxHash,omitempty"`
	// cancel txhash
	CancelTxHash string `protobuf:"bytes,17,opt,name=cancelTxHash" json:"cancelTxHash,omitempty"`
	Index        int64  `protobuf:"varint,18,opt,name=index" json:"index,omitempty"`
	PrevIndex    int64  `protobuf:"varint,19,opt,name=prevIndex" json:"prevIndex,omitempty"`
	CreatorGuess int32  `protobuf:"varint,20,opt,name=creatorGuess" json:"creatorGuess,omitempty"`
}

func (m *Fingerguessing) Reset()                    { *m = Fingerguessing{} }
func (m *Fingerguessing) String() string            { return proto.CompactTextString(m) }
func (*Fingerguessing) ProtoMessage()               {}
func (*Fingerguessing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Fingerguessing) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *Fingerguessing) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Fingerguessing) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Fingerguessing) GetMatchTime() int64 {
	if m != nil {
		return m.MatchTime
	}
	return 0
}

func (m *Fingerguessing) GetClosetime() int64 {
	if m != nil {
		return m.Closetime
	}
	return 0
}

func (m *Fingerguessing) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Fingerguessing) GetCreateAddress() string {
	if m != nil {
		return m.CreateAddress
	}
	return ""
}

func (m *Fingerguessing) GetMatchAddress() string {
	if m != nil {
		return m.MatchAddress
	}
	return ""
}

func (m *Fingerguessing) GetHashType() string {
	if m != nil {
		return m.HashType
	}
	return ""
}

func (m *Fingerguessing) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

func (m *Fingerguessing) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Fingerguessing) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *Fingerguessing) GetMatcherGuess() int32 {
	if m != nil {
		return m.MatcherGuess
	}
	return 0
}

func (m *Fingerguessing) GetCreateTxHash() string {
	if m != nil {
		return m.CreateTxHash
	}
	return ""
}

func (m *Fingerguessing) GetMatchTxHash() string {
	if m != nil {
		return m.MatchTxHash
	}
	return ""
}

func (m *Fingerguessing) GetCloseTxHash() string {
	if m != nil {
		return m.CloseTxHash
	}
	return ""
}

func (m *Fingerguessing) GetCancelTxHash() string {
	if m != nil {
		return m.CancelTxHash
	}
	return ""
}

func (m *Fingerguessing) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Fingerguessing) GetPrevIndex() int64 {
	if m != nil {
		return m.PrevIndex
	}
	return 0
}

func (m *Fingerguessing) GetCreatorGuess() int32 {
	if m != nil {
		return m.CreatorGuess
	}
	return 0
}

// message for execs.fingerguessing
type FingerguessingAction struct {
	// Types that are valid to be assigned to Value:
	//	*FingerguessingAction_Create
	//	*FingerguessingAction_Cancel
	//	*FingerguessingAction_Close
	//	*FingerguessingAction_Match
	Value isFingerguessingAction_Value `protobuf_oneof:"value"`
	Ty    int32                        `protobuf:"varint,10,opt,name=ty" json:"ty,omitempty"`
}

func (m *FingerguessingAction) Reset()                    { *m = FingerguessingAction{} }
func (m *FingerguessingAction) String() string            { return proto.CompactTextString(m) }
func (*FingerguessingAction) ProtoMessage()               {}
func (*FingerguessingAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isFingerguessingAction_Value interface {
	isFingerguessingAction_Value()
}

type FingerguessingAction_Create struct {
	Create *GameCreate `protobuf:"bytes,1,opt,name=create,oneof"`
}
type FingerguessingAction_Cancel struct {
	Cancel *GameCancel `protobuf:"bytes,2,opt,name=cancel,oneof"`
}
type FingerguessingAction_Close struct {
	Close *GameClose `protobuf:"bytes,3,opt,name=close,oneof"`
}
type FingerguessingAction_Match struct {
	Match *GameMatch `protobuf:"bytes,4,opt,name=match,oneof"`
}

func (*FingerguessingAction_Create) isFingerguessingAction_Value() {}
func (*FingerguessingAction_Cancel) isFingerguessingAction_Value() {}
func (*FingerguessingAction_Close) isFingerguessingAction_Value()  {}
func (*FingerguessingAction_Match) isFingerguessingAction_Value()  {}

func (m *FingerguessingAction) GetValue() isFingerguessingAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FingerguessingAction) GetCreate() *GameCreate {
	if x, ok := m.GetValue().(*FingerguessingAction_Create); ok {
		return x.Create
	}
	return nil
}

func (m *FingerguessingAction) GetCancel() *GameCancel {
	if x, ok := m.GetValue().(*FingerguessingAction_Cancel); ok {
		return x.Cancel
	}
	return nil
}

func (m *FingerguessingAction) GetClose() *GameClose {
	if x, ok := m.GetValue().(*FingerguessingAction_Close); ok {
		return x.Close
	}
	return nil
}

func (m *FingerguessingAction) GetMatch() *GameMatch {
	if x, ok := m.GetValue().(*FingerguessingAction_Match); ok {
		return x.Match
	}
	return nil
}

func (m *FingerguessingAction) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FingerguessingAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FingerguessingAction_OneofMarshaler, _FingerguessingAction_OneofUnmarshaler, _FingerguessingAction_OneofSizer, []interface{}{
		(*FingerguessingAction_Create)(nil),
		(*FingerguessingAction_Cancel)(nil),
		(*FingerguessingAction_Close)(nil),
		(*FingerguessingAction_Match)(nil),
	}
}

func _FingerguessingAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FingerguessingAction)
	// value
	switch x := m.Value.(type) {
	case *FingerguessingAction_Create:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Create); err != nil {
			return err
		}
	case *FingerguessingAction_Cancel:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cancel); err != nil {
			return err
		}
	case *FingerguessingAction_Close:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Close); err != nil {
			return err
		}
	case *FingerguessingAction_Match:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Match); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FingerguessingAction.Value has unexpected type %T", x)
	}
	return nil
}

func _FingerguessingAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FingerguessingAction)
	switch tag {
	case 1: // value.create
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameCreate)
		err := b.DecodeMessage(msg)
		m.Value = &FingerguessingAction_Create{msg}
		return true, err
	case 2: // value.cancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameCancel)
		err := b.DecodeMessage(msg)
		m.Value = &FingerguessingAction_Cancel{msg}
		return true, err
	case 3: // value.close
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameClose)
		err := b.DecodeMessage(msg)
		m.Value = &FingerguessingAction_Close{msg}
		return true, err
	case 4: // value.match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GameMatch)
		err := b.DecodeMessage(msg)
		m.Value = &FingerguessingAction_Match{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FingerguessingAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FingerguessingAction)
	// value
	switch x := m.Value.(type) {
	case *FingerguessingAction_Create:
		s := proto.Size(x.Create)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FingerguessingAction_Cancel:
		s := proto.Size(x.Cancel)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FingerguessingAction_Close:
		s := proto.Size(x.Close)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FingerguessingAction_Match:
		s := proto.Size(x.Match)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GameMatch struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Guess  int32  `protobuf:"varint,2,opt,name=guess" json:"guess,omitempty"`
}

func (m *GameMatch) Reset()                    { *m = GameMatch{} }
func (m *GameMatch) String() string            { return proto.CompactTextString(m) }
func (*GameMatch) ProtoMessage()               {}
func (*GameMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GameMatch) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameMatch) GetGuess() int32 {
	if m != nil {
		return m.Guess
	}
	return 0
}

type GameCancel struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
}

func (m *GameCancel) Reset()                    { *m = GameCancel{} }
func (m *GameCancel) String() string            { return proto.CompactTextString(m) }
func (*GameCancel) ProtoMessage()               {}
func (*GameCancel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GameCancel) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

type GameClose struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *GameClose) Reset()                    { *m = GameClose{} }
func (m *GameClose) String() string            { return proto.CompactTextString(m) }
func (*GameClose) ProtoMessage()               {}
func (*GameClose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GameClose) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameClose) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type GameCreate struct {
	Value int64 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	// 加密用的算法
	HashType string `protobuf:"bytes,2,opt,name=hashType" json:"hashType,omitempty"`
	// 加密后的值
	HashValue []byte `protobuf:"bytes,3,opt,name=hashValue,proto3" json:"hashValue,omitempty"`
}

func (m *GameCreate) Reset()                    { *m = GameCreate{} }
func (m *GameCreate) String() string            { return proto.CompactTextString(m) }
func (*GameCreate) ProtoMessage()               {}
func (*GameCreate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GameCreate) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *GameCreate) GetHashType() string {
	if m != nil {
		return m.HashType
	}
	return ""
}

func (m *GameCreate) GetHashValue() []byte {
	if m != nil {
		return m.HashValue
	}
	return nil
}

// queryByAddr 和 queryByStatus共用同一个结构体
type QueryGameListByStatusAndAddr struct {
	// 优先根据status查询,status不可为空
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 二级搜索，如果要查询一个地址下的所有game信息，可以根据status，分多次查询，这样规避存储数据时的臃余情况
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// 索引值
	Index int64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	// 单页返回多少条记录，默认返回20条，单次最多返回100条
	Count int32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	// 0降序，1升序，默认降序
	Direction int32 `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
}

func (m *QueryGameListByStatusAndAddr) Reset()                    { *m = QueryGameListByStatusAndAddr{} }
func (m *QueryGameListByStatusAndAddr) String() string            { return proto.CompactTextString(m) }
func (*QueryGameListByStatusAndAddr) ProtoMessage()               {}
func (*QueryGameListByStatusAndAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryGameListByStatusAndAddr) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryGameListByStatusAndAddr) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGameListByStatusAndAddr) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryGameListByStatusAndAddr) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryGameListByStatusAndAddr) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

// 统计数量
type QueryGameListCount struct {
	// 优先根据status查询,status不可为空
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// 二级搜索，如果要查询一个地址下的所有game信息，可以根据status，分多次查询，这样规避存储数据时的臃余情况
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *QueryGameListCount) Reset()                    { *m = QueryGameListCount{} }
func (m *QueryGameListCount) String() string            { return proto.CompactTextString(m) }
func (*QueryGameListCount) ProtoMessage()               {}
func (*QueryGameListCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *QueryGameListCount) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryGameListCount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// 索引value值
type GameRecord struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Index  int64  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *GameRecord) Reset()                    { *m = GameRecord{} }
func (m *GameRecord) String() string            { return proto.CompactTextString(m) }
func (*GameRecord) ProtoMessage()               {}
func (*GameRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GameRecord) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *GameRecord) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGameInfo struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
}

func (m *QueryGameInfo) Reset()                    { *m = QueryGameInfo{} }
func (m *QueryGameInfo) String() string            { return proto.CompactTextString(m) }
func (*QueryGameInfo) ProtoMessage()               {}
func (*QueryGameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *QueryGameInfo) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

type QueryGameInfos struct {
	GameIds []string `protobuf:"bytes,1,rep,name=gameIds" json:"gameIds,omitempty"`
}

func (m *QueryGameInfos) Reset()                    { *m = QueryGameInfos{} }
func (m *QueryGameInfos) String() string            { return proto.CompactTextString(m) }
func (*QueryGameInfos) ProtoMessage()               {}
func (*QueryGameInfos) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *QueryGameInfos) GetGameIds() []string {
	if m != nil {
		return m.GameIds
	}
	return nil
}

type ReplyGameList struct {
	Games []*Fingerguessing `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (m *ReplyGameList) Reset()                    { *m = ReplyGameList{} }
func (m *ReplyGameList) String() string            { return proto.CompactTextString(m) }
func (*ReplyGameList) ProtoMessage()               {}
func (*ReplyGameList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReplyGameList) GetGames() []*Fingerguessing {
	if m != nil {
		return m.Games
	}
	return nil
}

type ReplyGameListCount struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *ReplyGameListCount) Reset()                    { *m = ReplyGameListCount{} }
func (m *ReplyGameListCount) String() string            { return proto.CompactTextString(m) }
func (*ReplyGameListCount) ProtoMessage()               {}
func (*ReplyGameListCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReplyGameListCount) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReplyGame struct {
	Game *Fingerguessing `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
}

func (m *ReplyGame) Reset()                    { *m = ReplyGame{} }
func (m *ReplyGame) String() string            { return proto.CompactTextString(m) }
func (*ReplyGame) ProtoMessage()               {}
func (*ReplyGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReplyGame) GetGame() *Fingerguessing {
	if m != nil {
		return m.Game
	}
	return nil
}

type ReceiptGame struct {
	GameId string `protobuf:"bytes,1,opt,name=gameId" json:"gameId,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	// 记录上一次状态
	PrevStatus int32  `protobuf:"varint,3,opt,name=prevStatus" json:"prevStatus,omitempty"`
	Addr       string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	CreateAddr string `protobuf:"bytes,5,opt,name=createAddr" json:"createAddr,omitempty"`
	MatchAddr  string `protobuf:"bytes,6,opt,name=matchAddr" json:"matchAddr,omitempty"`
	Index      int64  `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	PrevIndex  int64  `protobuf:"varint,8,opt,name=prevIndex" json:"prevIndex,omitempty"`
}

func (m *ReceiptGame) Reset()                    { *m = ReceiptGame{} }
func (m *ReceiptGame) String() string            { return proto.CompactTextString(m) }
func (*ReceiptGame) ProtoMessage()               {}
func (*ReceiptGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReceiptGame) GetGameId() string {
	if m != nil {
		return m.GameId
	}
	return ""
}

func (m *ReceiptGame) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReceiptGame) GetPrevStatus() int32 {
	if m != nil {
		return m.PrevStatus
	}
	return 0
}

func (m *ReceiptGame) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ReceiptGame) GetCreateAddr() string {
	if m != nil {
		return m.CreateAddr
	}
	return ""
}

func (m *ReceiptGame) GetMatchAddr() string {
	if m != nil {
		return m.MatchAddr
	}
	return ""
}

func (m *ReceiptGame) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ReceiptGame) GetPrevIndex() int64 {
	if m != nil {
		return m.PrevIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*Fingerguessing)(nil), "types.Fingerguessing")
	proto.RegisterType((*FingerguessingAction)(nil), "types.FingerguessingAction")
	proto.RegisterType((*GameMatch)(nil), "types.GameMatch")
	proto.RegisterType((*GameCancel)(nil), "types.GameCancel")
	proto.RegisterType((*GameClose)(nil), "types.GameClose")
	proto.RegisterType((*GameCreate)(nil), "types.GameCreate")
	proto.RegisterType((*QueryGameListByStatusAndAddr)(nil), "types.QueryGameListByStatusAndAddr")
	proto.RegisterType((*QueryGameListCount)(nil), "types.QueryGameListCount")
	proto.RegisterType((*GameRecord)(nil), "types.GameRecord")
	proto.RegisterType((*QueryGameInfo)(nil), "types.QueryGameInfo")
	proto.RegisterType((*QueryGameInfos)(nil), "types.QueryGameInfos")
	proto.RegisterType((*ReplyGameList)(nil), "types.ReplyGameList")
	proto.RegisterType((*ReplyGameListCount)(nil), "types.ReplyGameListCount")
	proto.RegisterType((*ReplyGame)(nil), "types.ReplyGame")
	proto.RegisterType((*ReceiptGame)(nil), "types.ReceiptGame")
}

func init() { proto.RegisterFile("fingerguessing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4d, 0x6b, 0xdb, 0x4c,
	0x10, 0x8e, 0x6c, 0xcb, 0x8e, 0xc6, 0xb1, 0xdf, 0x64, 0x5f, 0xbf, 0x2f, 0xa2, 0x84, 0x62, 0x96,
	0x40, 0xdd, 0x04, 0x72, 0x48, 0xa1, 0xd0, 0x8f, 0x4b, 0x12, 0xc8, 0x07, 0xb4, 0x87, 0x6e, 0x43,
	0x4f, 0xbd, 0xa8, 0xd2, 0xc6, 0x16, 0xd8, 0x92, 0x91, 0xd6, 0x21, 0xfe, 0x2b, 0xfd, 0x6f, 0x3d,
	0xf5, 0xde, 0xdf, 0x50, 0x66, 0x66, 0x23, 0xad, 0x02, 0x0e, 0xb4, 0x37, 0xcd, 0x33, 0xcf, 0x6a,
	0x9e, 0x9d, 0x7d, 0x66, 0x17, 0x46, 0xb7, 0x69, 0x36, 0xd5, 0xc5, 0x74, 0xa5, 0xcb, 0x32, 0xcd,
	0xa6, 0xc7, 0xcb, 0x22, 0x37, 0xb9, 0xf0, 0xcd, 0x7a, 0xa9, 0x4b, 0xf9, 0xab, 0x03, 0xc3, 0x8b,
	0x46, 0x5e, 0xfc, 0x0f, 0xdd, 0x69, 0xb4, 0xd0, 0xd7, 0x49, 0xe8, 0x8d, 0xbd, 0x49, 0xa0, 0x6c,
	0x84, 0x78, 0x69, 0x22, 0xb3, 0x2a, 0xc3, 0xd6, 0xd8, 0x9b, 0xf8, 0xca, 0x46, 0xe2, 0x39, 0x40,
	0x5c, 0xe8, 0xc8, 0xe8, 0x9b, 0x74, 0xa1, 0xc3, 0xf6, 0xd8, 0x9b, 0xb4, 0x95, 0x83, 0x88, 0x7d,
	0x08, 0x16, 0x91, 0x89, 0x67, 0x94, 0xee, 0x50, 0xba, 0x06, 0x30, 0x1b, 0xcf, 0xf3, 0x52, 0x1b,
	0xcc, 0xfa, 0x9c, 0xad, 0x00, 0x31, 0x02, 0xff, 0x2e, 0x9a, 0xaf, 0x74, 0xd8, 0xa5, 0x0c, 0x07,
	0xe2, 0x00, 0x06, 0xfc, 0xff, 0xd3, 0x24, 0x29, 0x74, 0x59, 0x86, 0x3d, 0x12, 0xda, 0x04, 0x85,
	0x84, 0x1d, 0x2a, 0xf3, 0x40, 0xda, 0x26, 0x52, 0x03, 0x13, 0xcf, 0x60, 0x7b, 0x16, 0x95, 0xb3,
	0x9b, 0xf5, 0x52, 0x87, 0x01, 0xe5, 0xab, 0x18, 0x95, 0xe1, 0xf7, 0x17, 0xaa, 0x0f, 0x63, 0x6f,
	0xb2, 0xa3, 0x6a, 0x80, 0xba, 0xa1, 0xe3, 0x42, 0x9b, 0xb0, 0xcf, 0x5d, 0xe2, 0x08, 0xf1, 0x42,
	0x97, 0xab, 0xb9, 0x09, 0x77, 0xb8, 0x4b, 0x1c, 0x55, 0x6a, 0x74, 0x71, 0x89, 0x8d, 0x0e, 0x07,
	0x94, 0x6d, 0x60, 0xc8, 0xb1, 0x7d, 0xbb, 0xbf, 0x8a, 0xca, 0x59, 0x38, 0x64, 0xc5, 0x2e, 0x26,
	0xc6, 0xd0, 0xe7, 0xe6, 0x31, 0xe5, 0x1f, 0xa2, 0xb8, 0x10, 0x32, 0xa8, 0x81, 0x96, 0xb1, 0xcb,
	0x0c, 0x07, 0xa2, 0x3a, 0x51, 0x16, 0xeb, 0xb9, 0xa5, 0xec, 0xd9, 0x3a, 0x0e, 0x86, 0x9d, 0x4f,
	0xb3, 0x44, 0xdf, 0x87, 0x82, 0x3b, 0x4f, 0x01, 0xf6, 0x64, 0x59, 0xe8, 0xbb, 0x6b, 0xca, 0xfc,
	0xcb, 0xa7, 0x55, 0x01, 0x95, 0xfe, 0xdc, 0xee, 0x71, 0xc4, 0x7b, 0x74, 0x31, 0xf9, 0xc3, 0x83,
	0x51, 0xd3, 0x70, 0xa7, 0xb1, 0x49, 0xf3, 0x4c, 0x1c, 0x41, 0x97, 0x37, 0x4a, 0xb6, 0xeb, 0x9f,
	0xec, 0x1d, 0x93, 0x43, 0x8f, 0x2f, 0xa3, 0x85, 0x3e, 0xa7, 0xc4, 0xd5, 0x96, 0xb2, 0x14, 0x22,
	0x93, 0x5a, 0xf2, 0xe2, 0x23, 0x32, 0x25, 0x88, 0x4c, 0x5f, 0x62, 0x02, 0x3e, 0xed, 0x9e, 0xbc,
	0xd9, 0x3f, 0xd9, 0x75, 0xb9, 0x88, 0x5f, 0x6d, 0x29, 0x26, 0x20, 0x93, 0x3a, 0x49, 0x36, 0x6d,
	0x32, 0x3f, 0x22, 0x8e, 0x4c, 0x22, 0x88, 0x21, 0xb4, 0xcc, 0x9a, 0x5c, 0xe1, 0xab, 0x96, 0x59,
	0x9f, 0xf5, 0xac, 0x51, 0xe5, 0x1b, 0x08, 0x2a, 0xfa, 0xc6, 0x51, 0x1a, 0x81, 0x4f, 0xbb, 0xb7,
	0x93, 0xc4, 0x81, 0x3c, 0x00, 0xa8, 0xf5, 0x6f, 0x5a, 0x2b, 0xdf, 0x71, 0x01, 0x52, 0xfe, 0xe4,
	0xac, 0xb2, 0x3b, 0x5b, 0xae, 0x3b, 0xe5, 0x57, 0x5b, 0x82, 0xbb, 0x58, 0x4d, 0x97, 0xe7, 0x4e,
	0x97, 0x3b, 0x13, 0xad, 0xa7, 0x66, 0xa2, 0xfd, 0x68, 0x26, 0xe4, 0x77, 0x0f, 0xf6, 0x3f, 0xad,
	0x74, 0xb1, 0xc6, 0x1a, 0x1f, 0xd2, 0xd2, 0x9c, 0xad, 0x3f, 0xd3, 0x1d, 0x71, 0x9a, 0x25, 0x38,
	0x71, 0xce, 0x15, 0xe2, 0x35, 0xae, 0x90, 0x10, 0x7a, 0x91, 0x9d, 0x52, 0xae, 0xf8, 0x10, 0xd6,
	0x36, 0x6c, 0xbb, 0x36, 0x1c, 0x81, 0x1f, 0xe7, 0xab, 0xcc, 0xd0, 0x39, 0xf9, 0x8a, 0x03, 0x14,
	0x97, 0xa4, 0x85, 0x26, 0x3b, 0xd1, 0x55, 0xe2, 0xab, 0x1a, 0x90, 0x17, 0x20, 0x1a, 0xda, 0xce,
	0x69, 0xcd, 0x1f, 0x2b, 0x92, 0x6f, 0xb9, 0x85, 0x4a, 0xc7, 0x79, 0x91, 0x3c, 0x75, 0xc2, 0xac,
	0xbb, 0xe5, 0xe8, 0x96, 0x2f, 0x60, 0x50, 0x69, 0xb8, 0xce, 0x6e, 0xf3, 0x8d, 0x87, 0x7c, 0x08,
	0xc3, 0x06, 0x91, 0x04, 0x71, 0x0e, 0x95, 0xb6, 0x51, 0x90, 0x0d, 0xe5, 0x7b, 0x18, 0x28, 0xbd,
	0x9c, 0x57, 0x1b, 0x13, 0x47, 0xe0, 0x63, 0x8e, 0x89, 0xfd, 0x93, 0xff, 0xac, 0x8b, 0x9b, 0x53,
	0xa7, 0x98, 0x23, 0x0f, 0x41, 0x34, 0x56, 0x73, 0x5b, 0xaa, 0x06, 0x5b, 0x67, 0x50, 0x20, 0x5f,
	0x43, 0x50, 0x71, 0xc5, 0x4b, 0xe8, 0xe0, 0x1f, 0xec, 0xb4, 0x6e, 0x28, 0x42, 0x14, 0xf9, 0xd3,
	0x83, 0xbe, 0xd2, 0xb1, 0x4e, 0x97, 0x86, 0x96, 0xfe, 0xc5, 0x0b, 0x83, 0x97, 0x0c, 0x7b, 0x89,
	0x9c, 0xe0, 0x2b, 0x07, 0x11, 0x02, 0x3a, 0x78, 0x3a, 0xe4, 0x86, 0x40, 0xd1, 0x77, 0xfd, 0x2a,
	0xa1, 0xf1, 0xc8, 0x0d, 0x81, 0x72, 0x90, 0xea, 0x55, 0xa2, 0x74, 0x97, 0xd2, 0x35, 0x50, 0x1f,
	0x5f, 0x6f, 0xe3, 0xed, 0xb7, 0xfd, 0xe8, 0xf6, 0xfb, 0xd6, 0xa5, 0x87, 0xf5, 0xd5, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x41, 0xd7, 0xfa, 0x28, 0x70, 0x07, 0x00, 0x00,
}
