// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.9.1
// source: zksync.proto

package types

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZksyncAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ZksyncAction_Deposit
	//	*ZksyncAction_Withdraw
	//	*ZksyncAction_ContractToLeaf
	//	*ZksyncAction_LeafToContract
	//	*ZksyncAction_Transfer
	//	*ZksyncAction_TransferToNew
	//	*ZksyncAction_ForceQuit
	//	*ZksyncAction_SetPubKey
	Value    isZksyncAction_Value `protobuf_oneof:"value"`
	Ty       int32                `protobuf:"varint,9,opt,name=ty,proto3" json:"ty,omitempty"`
	PubKey   []byte               `protobuf:"bytes,10,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	SignInfo []byte               `protobuf:"bytes,11,opt,name=signInfo,proto3" json:"signInfo,omitempty"`
}

func (x *ZksyncAction) Reset() {
	*x = ZksyncAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZksyncAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZksyncAction) ProtoMessage() {}

func (x *ZksyncAction) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZksyncAction.ProtoReflect.Descriptor instead.
func (*ZksyncAction) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{0}
}

func (m *ZksyncAction) GetValue() isZksyncAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ZksyncAction) GetDeposit() *Deposit {
	if x, ok := x.GetValue().(*ZksyncAction_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ZksyncAction) GetWithdraw() *Withdraw {
	if x, ok := x.GetValue().(*ZksyncAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *ZksyncAction) GetContractToLeaf() *ContractToLeaf {
	if x, ok := x.GetValue().(*ZksyncAction_ContractToLeaf); ok {
		return x.ContractToLeaf
	}
	return nil
}

func (x *ZksyncAction) GetLeafToContract() *LeafToContract {
	if x, ok := x.GetValue().(*ZksyncAction_LeafToContract); ok {
		return x.LeafToContract
	}
	return nil
}

func (x *ZksyncAction) GetTransfer() *Transfer {
	if x, ok := x.GetValue().(*ZksyncAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ZksyncAction) GetTransferToNew() *TransferToNew {
	if x, ok := x.GetValue().(*ZksyncAction_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (x *ZksyncAction) GetForceQuit() *ForceQuit {
	if x, ok := x.GetValue().(*ZksyncAction_ForceQuit); ok {
		return x.ForceQuit
	}
	return nil
}

func (x *ZksyncAction) GetSetPubKey() *SetPubKey {
	if x, ok := x.GetValue().(*ZksyncAction_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (x *ZksyncAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

func (x *ZksyncAction) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZksyncAction) GetSignInfo() []byte {
	if x != nil {
		return x.SignInfo
	}
	return nil
}

type isZksyncAction_Value interface {
	isZksyncAction_Value()
}

type ZksyncAction_Deposit struct {
	Deposit *Deposit `protobuf:"bytes,1,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction_Withdraw struct {
	Withdraw *Withdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction_ContractToLeaf struct {
	ContractToLeaf *ContractToLeaf `protobuf:"bytes,3,opt,name=contractToLeaf,proto3,oneof"`
}

type ZksyncAction_LeafToContract struct {
	LeafToContract *LeafToContract `protobuf:"bytes,4,opt,name=leafToContract,proto3,oneof"`
}

type ZksyncAction_Transfer struct {
	Transfer *Transfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction_TransferToNew struct {
	TransferToNew *TransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction_ForceQuit struct {
	ForceQuit *ForceQuit `protobuf:"bytes,7,opt,name=forceQuit,proto3,oneof"`
}

type ZksyncAction_SetPubKey struct {
	SetPubKey *SetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

func (*ZksyncAction_Deposit) isZksyncAction_Value() {}

func (*ZksyncAction_Withdraw) isZksyncAction_Value() {}

func (*ZksyncAction_ContractToLeaf) isZksyncAction_Value() {}

func (*ZksyncAction_LeafToContract) isZksyncAction_Value() {}

func (*ZksyncAction_Transfer) isZksyncAction_Value() {}

func (*ZksyncAction_TransferToNew) isZksyncAction_Value() {}

func (*ZksyncAction_ForceQuit) isZksyncAction_Value() {}

func (*ZksyncAction_SetPubKey) isZksyncAction_Value() {}

//某条链上的代币余额
type ChainBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType       string          `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`                                                                                                       //BTY ETH
	TokenBalanceMap map[int32]int32 `protobuf:"bytes,2,rep,name=tokenBalanceMap,proto3" json:"tokenBalanceMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //<tokenId, index>
	TokenBalances   []*TokenBalance `protobuf:"bytes,3,rep,name=tokenBalances,proto3" json:"tokenBalances,omitempty"`
	RootHash        []byte          `protobuf:"bytes,4,opt,name=rootHash,proto3" json:"rootHash,omitempty"` //Balance Tree的hash
}

func (x *ChainBalance) Reset() {
	*x = ChainBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainBalance) ProtoMessage() {}

func (x *ChainBalance) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainBalance.ProtoReflect.Descriptor instead.
func (*ChainBalance) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{1}
}

func (x *ChainBalance) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *ChainBalance) GetTokenBalanceMap() map[int32]int32 {
	if x != nil {
		return x.TokenBalanceMap
	}
	return nil
}

func (x *ChainBalance) GetTokenBalances() []*TokenBalance {
	if x != nil {
		return x.TokenBalances
	}
	return nil
}

func (x *ChainBalance) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

//某个token的余额
type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId int32 `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Balance int64 `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{2}
}

func (x *TokenBalance) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *TokenBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type AccountTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           int32                `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                                                                                                       //当前的叶子索引
	TotalIndex      int32                `protobuf:"varint,2,opt,name=totalIndex,proto3" json:"totalIndex,omitempty"`                                                                                             //总计叶子索引
	MaxCurrentIndex int32                `protobuf:"varint,3,opt,name=maxCurrentIndex,proto3" json:"maxCurrentIndex,omitempty"`                                                                                   //当前索引最大值，超过最大值会进行归档
	RootMap         map[string]*RootInfo `protobuf:"bytes,4,rep,name=rootMap,proto3" json:"rootMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`            //历史归档的所有roots,key=root hash,value = rootInfo
	RootIndexMap    map[int32][]byte     `protobuf:"bytes,5,rep,name=rootIndexMap,proto3" json:"rootIndexMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //历史归档的所有roots索引，index = RootInfo.startIndex / 1024
	AddressMap      map[string]int32     `protobuf:"bytes,6,rep,name=addressMap,proto3" json:"addressMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LeaveMap        map[int32]*Leaf      `protobuf:"bytes,7,rep,name=leaveMap,proto3" json:"leaveMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //当前未归档的叶子
	SubTrees        []*SubTree           `protobuf:"bytes,8,rep,name=subTrees,proto3" json:"subTrees,omitempty"`                                                                                          //当前未归档的子树
}

func (x *AccountTree) Reset() {
	*x = AccountTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTree) ProtoMessage() {}

func (x *AccountTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTree.ProtoReflect.Descriptor instead.
func (*AccountTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{3}
}

func (x *AccountTree) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AccountTree) GetTotalIndex() int32 {
	if x != nil {
		return x.TotalIndex
	}
	return 0
}

func (x *AccountTree) GetMaxCurrentIndex() int32 {
	if x != nil {
		return x.MaxCurrentIndex
	}
	return 0
}

func (x *AccountTree) GetRootMap() map[string]*RootInfo {
	if x != nil {
		return x.RootMap
	}
	return nil
}

func (x *AccountTree) GetRootIndexMap() map[int32][]byte {
	if x != nil {
		return x.RootIndexMap
	}
	return nil
}

func (x *AccountTree) GetAddressMap() map[string]int32 {
	if x != nil {
		return x.AddressMap
	}
	return nil
}

func (x *AccountTree) GetLeaveMap() map[int32]*Leaf {
	if x != nil {
		return x.LeaveMap
	}
	return nil
}

func (x *AccountTree) GetSubTrees() []*SubTree {
	if x != nil {
		return x.SubTrees
	}
	return nil
}

type Leaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash        []byte           `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`    //归档Merkle Tree的根hash
	AccountId       int32            `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"` //accountId其实就是叶子的totalIndex
	ChainBalanceMap map[string]int32 `protobuf:"bytes,3,rep,name=chainBalanceMap,proto3" json:"chainBalanceMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChainBalances   []*ChainBalance  `protobuf:"bytes,4,rep,name=chainBalances,proto3" json:"chainBalances,omitempty"`
	EthAddress      string           `protobuf:"bytes,5,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`   //账户对应的以太坊地址
	PubKey          []byte           `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`           //eddsa公钥，用于验证身份
	Chain33Addr     string           `protobuf:"bytes,7,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"` //chain33地址
}

func (x *Leaf) Reset() {
	*x = Leaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaf) ProtoMessage() {}

func (x *Leaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaf.ProtoReflect.Descriptor instead.
func (*Leaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{4}
}

func (x *Leaf) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *Leaf) GetAccountId() int32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Leaf) GetChainBalanceMap() map[string]int32 {
	if x != nil {
		return x.ChainBalanceMap
	}
	return nil
}

func (x *Leaf) GetChainBalances() []*ChainBalance {
	if x != nil {
		return x.ChainBalances
	}
	return nil
}

func (x *Leaf) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *Leaf) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Leaf) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

type RootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height     int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`         //归档的高度
	StartIndex int32 `protobuf:"varint,2,opt,name=startIndex,proto3" json:"startIndex,omitempty"` //开始的全局index
}

func (x *RootInfo) Reset() {
	*x = RootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootInfo) ProtoMessage() {}

func (x *RootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootInfo.ProtoReflect.Descriptor instead.
func (*RootInfo) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{5}
}

func (x *RootInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RootInfo) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

type SubTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	RootHash []byte `protobuf:"bytes,2,opt,name=rootHash,proto3" json:"rootHash,omitempty"` //子树的根hash
}

func (x *SubTree) Reset() {
	*x = SubTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTree) ProtoMessage() {}

func (x *SubTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTree.ProtoReflect.Descriptor instead.
func (*SubTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{6}
}

func (x *SubTree) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SubTree) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

type MerkleTreeProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash   []byte   `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	ProofSet   [][]byte `protobuf:"bytes,2,rep,name=proofSet,proto3" json:"proofSet,omitempty"`
	ProofIndex uint64   `protobuf:"varint,3,opt,name=proofIndex,proto3" json:"proofIndex,omitempty"`
	NumLeaves  uint64   `protobuf:"varint,4,opt,name=numLeaves,proto3" json:"numLeaves,omitempty"`
	Helpers    []uint32 `protobuf:"varint,5,rep,packed,name=helpers,proto3" json:"helpers,omitempty"`
}

func (x *MerkleTreeProof) Reset() {
	*x = MerkleTreeProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeProof) ProtoMessage() {}

func (x *MerkleTreeProof) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeProof.ProtoReflect.Descriptor instead.
func (*MerkleTreeProof) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{7}
}

func (x *MerkleTreeProof) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

func (x *MerkleTreeProof) GetProofSet() [][]byte {
	if x != nil {
		return x.ProofSet
	}
	return nil
}

func (x *MerkleTreeProof) GetProofIndex() uint64 {
	if x != nil {
		return x.ProofIndex
	}
	return 0
}

func (x *MerkleTreeProof) GetNumLeaves() uint64 {
	if x != nil {
		return x.NumLeaves
	}
	return 0
}

func (x *MerkleTreeProof) GetHelpers() []uint32 {
	if x != nil {
		return x.Helpers
	}
	return nil
}

type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType   string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId     int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount      uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress  string `protobuf:"bytes,4,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Chain33Addr string `protobuf:"bytes,5,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

func (x *Deposit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{8}
}

func (x *Deposit) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *Deposit) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *Deposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Deposit) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *Deposit) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

type Withdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType  string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId    int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress string `protobuf:"bytes,4,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{9}
}

func (x *Withdraw) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *Withdraw) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *Withdraw) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Withdraw) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

type ContractToLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType  string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId    int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress string `protobuf:"bytes,4,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (x *ContractToLeaf) Reset() {
	*x = ContractToLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractToLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractToLeaf) ProtoMessage() {}

func (x *ContractToLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractToLeaf.ProtoReflect.Descriptor instead.
func (*ContractToLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{10}
}

func (x *ContractToLeaf) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *ContractToLeaf) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ContractToLeaf) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ContractToLeaf) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

type LeafToContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType  string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId    int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress string `protobuf:"bytes,4,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (x *LeafToContract) Reset() {
	*x = LeafToContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeafToContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeafToContract) ProtoMessage() {}

func (x *LeafToContract) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeafToContract.ProtoReflect.Descriptor instead.
func (*LeafToContract) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{11}
}

func (x *LeafToContract) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *LeafToContract) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *LeafToContract) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LeafToContract) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType      string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId        int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount         uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	FromEthAddress string `protobuf:"bytes,4,opt,name=fromEthAddress,proto3" json:"fromEthAddress,omitempty"`
	ToEthAddress   string `protobuf:"bytes,5,opt,name=toEthAddress,proto3" json:"toEthAddress,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{12}
}

func (x *Transfer) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *Transfer) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *Transfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transfer) GetFromEthAddress() string {
	if x != nil {
		return x.FromEthAddress
	}
	return ""
}

func (x *Transfer) GetToEthAddress() string {
	if x != nil {
		return x.ToEthAddress
	}
	return ""
}

type TransferToNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType        string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId          int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount           uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	FromEthAddress   string `protobuf:"bytes,4,opt,name=fromEthAddress,proto3" json:"fromEthAddress,omitempty"`
	ToEthAddress     string `protobuf:"bytes,5,opt,name=toEthAddress,proto3" json:"toEthAddress,omitempty"`
	ToChain33Address string `protobuf:"bytes,6,opt,name=toChain33Address,proto3" json:"toChain33Address,omitempty"`
}

func (x *TransferToNew) Reset() {
	*x = TransferToNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToNew) ProtoMessage() {}

func (x *TransferToNew) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToNew.ProtoReflect.Descriptor instead.
func (*TransferToNew) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{13}
}

func (x *TransferToNew) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *TransferToNew) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *TransferToNew) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferToNew) GetFromEthAddress() string {
	if x != nil {
		return x.FromEthAddress
	}
	return ""
}

func (x *TransferToNew) GetToEthAddress() string {
	if x != nil {
		return x.ToEthAddress
	}
	return ""
}

func (x *TransferToNew) GetToChain33Address() string {
	if x != nil {
		return x.ToChain33Address
	}
	return ""
}

type ForceQuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainType  string `protobuf:"bytes,1,opt,name=chainType,proto3" json:"chainType,omitempty"`
	TokenId    int32  `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	EthAddress string `protobuf:"bytes,3,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
}

func (x *ForceQuit) Reset() {
	*x = ForceQuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceQuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceQuit) ProtoMessage() {}

func (x *ForceQuit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceQuit.ProtoReflect.Descriptor instead.
func (*ForceQuit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{14}
}

func (x *ForceQuit) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *ForceQuit) GetTokenId() int32 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ForceQuit) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

type SetPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthAddress string `protobuf:"bytes,1,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	PubKey     []byte `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (x *SetPubKey) Reset() {
	*x = SetPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPubKey) ProtoMessage() {}

func (x *SetPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPubKey.ProtoReflect.Descriptor instead.
func (*SetPubKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{15}
}

func (x *SetPubKey) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *SetPubKey) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

// leaf merkle proof票据日志
type ReceiptLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId  int32            `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	TreeProof  *MerkleTreeProof `protobuf:"bytes,2,opt,name=treeProof,proto3" json:"treeProof,omitempty"`
	TokenProof *MerkleTreeProof `protobuf:"bytes,3,opt,name=tokenProof,proto3" json:"tokenProof,omitempty"`
}

func (x *ReceiptLeaf) Reset() {
	*x = ReceiptLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptLeaf) ProtoMessage() {}

func (x *ReceiptLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptLeaf.ProtoReflect.Descriptor instead.
func (*ReceiptLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{16}
}

func (x *ReceiptLeaf) GetAccountId() int32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ReceiptLeaf) GetTreeProof() *MerkleTreeProof {
	if x != nil {
		return x.TreeProof
	}
	return nil
}

func (x *ReceiptLeaf) GetTokenProof() *MerkleTreeProof {
	if x != nil {
		return x.TokenProof
	}
	return nil
}

var File_zksync_proto protoreflect.FileDescriptor

var file_zksync_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x89, 0x04, 0x0a, 0x0c, 0x5a, 0x6b, 0x73, 0x79, 0x6e, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c,
	0x65, 0x61, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65,
	0x61, 0x66, 0x12, 0x3f, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x4e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77,
	0x12, 0x30, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x51, 0x75, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9b, 0x02, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x42, 0x0a, 0x14, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x42, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xb7, 0x05, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x48,
	0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x08,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x65,
	0x61, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x02,
	0x0a, 0x04, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4c, 0x65, 0x61, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64,
	0x72, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3d, 0x0a, 0x07, 0x53, 0x75, 0x62,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x22, 0x9b, 0x01, 0x0a,
	0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74,
	0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x22, 0x7a, 0x0a, 0x08, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4c, 0x65,
	0x61, 0x66, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x45,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x63, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x51, 0x75, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x09, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x32, 0x08, 0x0a, 0x06, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_zksync_proto_rawDescOnce sync.Once
	file_zksync_proto_rawDescData = file_zksync_proto_rawDesc
)

func file_zksync_proto_rawDescGZIP() []byte {
	file_zksync_proto_rawDescOnce.Do(func() {
		file_zksync_proto_rawDescData = protoimpl.X.CompressGZIP(file_zksync_proto_rawDescData)
	})
	return file_zksync_proto_rawDescData
}

var file_zksync_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_zksync_proto_goTypes = []interface{}{
	(*ZksyncAction)(nil),    // 0: types.ZksyncAction
	(*ChainBalance)(nil),    // 1: types.ChainBalance
	(*TokenBalance)(nil),    // 2: types.TokenBalance
	(*AccountTree)(nil),     // 3: types.AccountTree
	(*Leaf)(nil),            // 4: types.Leaf
	(*RootInfo)(nil),        // 5: types.RootInfo
	(*SubTree)(nil),         // 6: types.SubTree
	(*MerkleTreeProof)(nil), // 7: types.MerkleTreeProof
	(*Deposit)(nil),         // 8: types.Deposit
	(*Withdraw)(nil),        // 9: types.Withdraw
	(*ContractToLeaf)(nil),  // 10: types.ContractToLeaf
	(*LeafToContract)(nil),  // 11: types.LeafToContract
	(*Transfer)(nil),        // 12: types.Transfer
	(*TransferToNew)(nil),   // 13: types.TransferToNew
	(*ForceQuit)(nil),       // 14: types.ForceQuit
	(*SetPubKey)(nil),       // 15: types.SetPubKey
	(*ReceiptLeaf)(nil),     // 16: types.ReceiptLeaf
	nil,                     // 17: types.ChainBalance.TokenBalanceMapEntry
	nil,                     // 18: types.AccountTree.RootMapEntry
	nil,                     // 19: types.AccountTree.RootIndexMapEntry
	nil,                     // 20: types.AccountTree.AddressMapEntry
	nil,                     // 21: types.AccountTree.LeaveMapEntry
	nil,                     // 22: types.Leaf.ChainBalanceMapEntry
}
var file_zksync_proto_depIdxs = []int32{
	8,  // 0: types.ZksyncAction.deposit:type_name -> types.Deposit
	9,  // 1: types.ZksyncAction.withdraw:type_name -> types.Withdraw
	10, // 2: types.ZksyncAction.contractToLeaf:type_name -> types.ContractToLeaf
	11, // 3: types.ZksyncAction.leafToContract:type_name -> types.LeafToContract
	12, // 4: types.ZksyncAction.transfer:type_name -> types.Transfer
	13, // 5: types.ZksyncAction.transferToNew:type_name -> types.TransferToNew
	14, // 6: types.ZksyncAction.forceQuit:type_name -> types.ForceQuit
	15, // 7: types.ZksyncAction.setPubKey:type_name -> types.SetPubKey
	17, // 8: types.ChainBalance.tokenBalanceMap:type_name -> types.ChainBalance.TokenBalanceMapEntry
	2,  // 9: types.ChainBalance.tokenBalances:type_name -> types.TokenBalance
	18, // 10: types.AccountTree.rootMap:type_name -> types.AccountTree.RootMapEntry
	19, // 11: types.AccountTree.rootIndexMap:type_name -> types.AccountTree.RootIndexMapEntry
	20, // 12: types.AccountTree.addressMap:type_name -> types.AccountTree.AddressMapEntry
	21, // 13: types.AccountTree.leaveMap:type_name -> types.AccountTree.LeaveMapEntry
	6,  // 14: types.AccountTree.subTrees:type_name -> types.SubTree
	22, // 15: types.Leaf.chainBalanceMap:type_name -> types.Leaf.ChainBalanceMapEntry
	1,  // 16: types.Leaf.chainBalances:type_name -> types.ChainBalance
	7,  // 17: types.ReceiptLeaf.treeProof:type_name -> types.MerkleTreeProof
	7,  // 18: types.ReceiptLeaf.tokenProof:type_name -> types.MerkleTreeProof
	5,  // 19: types.AccountTree.RootMapEntry.value:type_name -> types.RootInfo
	4,  // 20: types.AccountTree.LeaveMapEntry.value:type_name -> types.Leaf
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_zksync_proto_init() }
func file_zksync_proto_init() {
	if File_zksync_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zksync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZksyncAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractToLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeafToContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceQuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zksync_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ZksyncAction_Deposit)(nil),
		(*ZksyncAction_Withdraw)(nil),
		(*ZksyncAction_ContractToLeaf)(nil),
		(*ZksyncAction_LeafToContract)(nil),
		(*ZksyncAction_Transfer)(nil),
		(*ZksyncAction_TransferToNew)(nil),
		(*ZksyncAction_ForceQuit)(nil),
		(*ZksyncAction_SetPubKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zksync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zksync_proto_goTypes,
		DependencyIndexes: file_zksync_proto_depIdxs,
		MessageInfos:      file_zksync_proto_msgTypes,
	}.Build()
	File_zksync_proto = out.File
	file_zksync_proto_rawDesc = nil
	file_zksync_proto_goTypes = nil
	file_zksync_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZksyncClient is the client API for Zksync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZksyncClient interface {
}

type zksyncClient struct {
	cc grpc.ClientConnInterface
}

func NewZksyncClient(cc grpc.ClientConnInterface) ZksyncClient {
	return &zksyncClient{cc}
}

// ZksyncServer is the server API for Zksync service.
type ZksyncServer interface {
}

// UnimplementedZksyncServer can be embedded to have forward compatible implementations.
type UnimplementedZksyncServer struct {
}

func RegisterZksyncServer(s *grpc.Server, srv ZksyncServer) {
	s.RegisterService(&_Zksync_serviceDesc, srv)
}

var _Zksync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.zksync",
	HandlerType: (*ZksyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "zksync.proto",
}
