package pos33

/**
# pos33共识算法

## 总述
当前的区块链共识算法， 除了eos外， 性能都比较差：一是出块时间长， 也就意味着交易确认的时间久；二是tps小，也就是平均每秒的确认交易量太少， 对比传统的交易服务或者支付系统， 差几个数量级别。而eos采用dpos共识算法， 由固定的21个超级节点负责区块生产， 由于网络性能和机器性能得到保障， 并且dpos采取轮流打包， 延后确认的机制， 所以出块速度非常快， 0.5s一个区块， 并且tps达到4000， 对比eth 的tps只有20， 远远胜出. 但是eos得超级节点，虽然是投票产生， 但是却类似于中心化方式运作，这和区块链的去中心化理念相悖。

pos33采用抽签算法抽出共识委员会， 共识委员会轮流生产区块， 每个区块由委员会投票确认。为保证出块迅速，每届共识委员会成员数量控制在10个左右。当这届委员会生产区块的同时， 抽取下一届的委员成员。 这样选取委员不会占用出块的时间， 并且有足够的时间能够完成委员会成员的选取。抽签算法保证对于任何参与共识的节点是公平的， 所以pos33完全是去中心化的。

采取以上算法，pos33能够稳定在1秒出块，tps可以达到500比，峰值可达3000比。

## 选取委员会

### 抽签
pos33抽签算法是共识核心。 对于任何一个参与共识节点， 首先要抵押足够的“选票”（比如YCC）作为抽签的权重依据。

当开始选取下一届委员会的时候， 每个节点使用抽签公式计算一个或多个（根据选票的数量）值， 当这个值小于给定的难度时，则说明这个选票被抽中。 如果节点有w个选票被抽中， 则说明节点i为下届共识委员会成员，权重为w.

抽签公式是使用共有的数据：开始的区块B高度B_height和区块B_hash Bhash以及自己的选票索引Vote_i，使用节点自己的私钥Priv签名Sign，然后hash算法Sha256获得的：

```Sig := Sign(Priv, Pack(B_height, B_hash, Vote_i))```

```H := Sha256(Sig)```

（Pack是把公共数据序列化为二进制）

这个抽签算法是基于两个特点：

- sha256哈希算法产生的hash值在[0, 2^256)是均匀分布的
- sign签名算法可以验证, 防止伪造：

	```Verify(Pub, Pack(B_height, B_hash, Vote_i), Sig)```

难度:

```D := Pow(2, 256) * 10 / Vote_all```

（Vote_all表示所有选票）

当```H < D```时， 说明选票Vote_i被抽中。节点成为下届共识委员成员。节点n把所有被抽中的选票w向全网广播。验证无误后，把节点n加入下届共识委员会列表。

## 生产区块

### 委员会切换
当本届委员会完成区块生产后，由下届委员会开始生产区块，同时，开始抽签选取新一届委员会。

本届委员会完成的标志是： 假设委员会共有n个成员，总的权重W（所有节点被选中的票数）, 起始高度为Start_height， 当生产的区块高度为```End_height = Start_height + W``` 时, 说明本届委员会到期，开始由下届委员会执行，并且```Start_height = End_height```, 新一届委员会选取的高度为 ```B_height = Start_height```。

### 生产区块
本届委员会开始生产区块之前， 需要经过排序， 即把W个选票的Hash排序，从小到大， 由持有选票的节点轮流生产区块。

#### 投票
当接受到委员会成员节点生产的高度height区块B时，其他委员会成员节点需要对B进行投票，目的是防止造成分叉。（注意：```这里的投票和抽签的选票不同，这里仅对区块投票```）

投票之前需要验证：

- 当前生产区块的节点Bp是否正确
- 区块是否正确
- 是否收集到前一个区块足够的票数， 并且每个投票正确

如果验证通过， 那么执行奖励。 否则投反对票。

投票信息包括：```Sign(Priv, Pack(Bp_next, B_height, B_hash))```, 如果是反对票，```B_hash = nil```, 其中，Bp_next是下一个生产区块的节点。

当节点Bp_next收集到足够的票数， ```len(Votes) > 2/3 * W```, 节点Bp_next生产height+1区块， 广播。然后进行下一轮区块投票。

#### 奖励
如果区块正确，节点Bp将被奖励， 奖励的金额和Bp收集的投票成正比：
```Bp Reword := Sum(Votes) * YCC * Rc + Sum(Txs_fee)```

区块完成确认后，则奖励投票。节点投票获取的奖励为：

```Vote Reword := (R) * w * YCC```

R表示奖励系数，F表示扣除系数，w表示节点拥有的投票的权重（即被抽中的选票）
#### 惩罚
乱投票

##### YCC挖矿奖励
系统每个区块奖励R个YCC。如果委员会有W个选票。其中N个奖励给Bp节点， M个奖励给投票节点。那么：

```Rc * W = N; (R - F) * W = N; N + M <= R;  ```

如果

```R = 10, W = 10， N = 5，M = 5, 则：Rc = 0.5, (R-F) = 0.5, 令 R = 0.6, 则 F = 0.1 ```

也就是Bp节点成功生成区块，每收集一个投票，就有0.5个YCC；其他投票节点每投一票扣0.1个YCC，投票被收集奖励0.6个YCC。
如果没有收集到足够的投票，那么剩下的YCC给到发展基金账户。


## 异常

### Bp_next没有产生区块

当高度h区块B_h确认后，设置一个超时时间T，当超过时间T后，还没有接收到新区块，说明Bp_next异常，那么将由Bp_next的下一个Bp生产两个区块，一个空的h+1区块，和正常的h+2区块。其中空区块不获得奖励。

### 产生两个高度相同的区块

当节点接受到同为h的，hash不同的区块，通过判断区块收集的投票，选择票数多的。在实现上，结合chain33链难度，可以把投票的数量作为难度，写入区块。

### 委员会选取失败

每次抽签选取委员会时，设置一个超时定时器T，如果超出时间T，委员会票数不足5个，说明委员会选取失败，需要重新抽签选择。重新抽签选择区块B_height+1作为抽签的基础。

### **委员会选取是否需要pbft共识**

1. 当前委员会成员对每一个抽签的hash进行投票
2. 当 > 2/3 权重投票，则此hash

## 安全

### DDOS攻击
由于委员会是提前抽签选出后，广播到全网。所以很容易暴露。也容易遭受攻击。

但是由于pos33节点需要抵押足够的金额才能参与共识，这样可以节点防护的时候，可以白名单的方式，拒绝非抵押节点的（非交易）信息。

### 女巫攻击
同样，参与共识节点需要抵押足够的金额，采取女巫攻击在pos33里是不明智的。

*/
