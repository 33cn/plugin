***************
*** 33,65 ****
  #include "buckets.t"
  template class Log<Checkpoint_rec>;
  
  // External pointers to memory and bitmap for macros that check cow
  // bits.
  unsigned long *_Byz_cow_bits = 0;
  char *_Byz_mem = 0;
  
  //
  // The memory managed by the state abstraction is partitioned into
  // blocks.
  //
  struct Block {
    char data[Block_size];
    
    inline Block() {
    }
  
    inline Block(Block const & other) {
      memcpy(data, other.data, Block_size);
    }
  
    inline Block& Block::operator=(Block const &other) {
      if (this == &other) return *this;
      memcpy(data, other.data, Block_size);
      return *this;
    }
  
    inline Block& Block::operator=(char const *other) {
      if (this->data == other) return *this;
      memcpy(data, other, Block_size);
      return *this;
    }  
--- 33,112 ----
  #include "buckets.t"
  template class Log<Checkpoint_rec>;
  
+ 
+ #ifdef NO_STATE_TRANSLATION
  // External pointers to memory and bitmap for macros that check cow
  // bits.
  unsigned long *_Byz_cow_bits = 0;
  char *_Byz_mem = 0;
+ #endif
  
  //
  // The memory managed by the state abstraction is partitioned into
  // blocks.
  //
  struct Block {
+ #ifdef NO_STATE_TRANSLATION
    char data[Block_size];
+ #else
+   char *data;
+   int size;
+ #endif
    
    inline Block() {
+ #ifndef NO_STATE_TRANSLATION
+     data = NULL;
+     size = 0;
+ #endif
    }
  
    inline Block(Block const & other) {
+ #ifndef NO_STATE_TRANSLATION
+     size = other.size;
+     data = new char[size];
+     memcpy(data, other.data, size);
+ #else    
      memcpy(data, other.data, Block_size);
+ #endif
+   }
+ 
+ #ifndef NO_STATE_TRANSLATION
+   inline ~Block() { if (data) delete [] data; }
+ 
+   inline void Block::init_from_ptr(char *ptr, int psize) {
+     if (data) delete [] data;
+     data = ptr;
+     size = psize;
    }
  
+ #endif
+ 
    inline Block& Block::operator=(Block const &other) {
      if (this == &other) return *this;
+ #ifndef NO_STATE_TRANSLATION
+     if (size != other.size) {
+       if (data)
+ 	delete [] data;
+       data = new char[other.size];
+     }
+     size = other.size; 
+     memcpy(data, other.data, other.size);
+ #else
      memcpy(data, other.data, Block_size);
+ #endif
      return *this;
    }
  
    inline Block& Block::operator=(char const *other) {
      if (this->data == other) return *this;
+ #ifndef NO_STATE_TRANSLATION
+     if (size != Block_size) {
+       if (data)
+ 	delete [] data;
+       data = new char[Block_size];
+     }
+     size = Block_size; 
+ #endif
      memcpy(data, other, Block_size);
      return *this;
    }  
***************
*** 849,854 ****
      
      Part *p = r.fetch(PLevels-1, i);
      if (p) {
        return ((BlockCopy*)p)->data.data;
      }
    }
--- 1219,1230 ----
      
      Part *p = r.fetch(PLevels-1, i);
      if (p) {
+ #ifndef NO_STATE_TRANSLATION
+       if (i<nb-replica->used_state_pages())
+ 	objsz = ((BlockCopy*)p)->data.size;
+       else
+ 	objsz = Block_size;
+ #endif
        return ((BlockCopy*)p)->data.data;
      }
    }
