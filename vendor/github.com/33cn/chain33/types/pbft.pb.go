// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pbft.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BlockData struct {
	Value *Block `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *BlockData) Reset()                    { *m = BlockData{} }
func (m *BlockData) String() string            { return proto.CompactTextString(m) }
func (*BlockData) ProtoMessage()               {}
func (*BlockData) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *BlockData) GetValue() *Block {
	if m != nil {
		return m.Value
	}
	return nil
}

type Checkpoint struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Checkpoint) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *Checkpoint) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type Request struct {
	// Types that are valid to be assigned to Value:
	//	*Request_Client
	//	*Request_Preprepare
	//	*Request_Prepare
	//	*Request_Commit
	//	*Request_Checkpoint
	//	*Request_Viewchange
	//	*Request_Ack
	//	*Request_Newview
	//	*Request_Reply
	Value isRequest_Value `protobuf_oneof:"value"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

type isRequest_Value interface{ isRequest_Value() }

type Request_Client struct {
	Client *RequestClient `protobuf:"bytes,1,opt,name=client,oneof"`
}
type Request_Preprepare struct {
	Preprepare *RequestPrePrepare `protobuf:"bytes,2,opt,name=preprepare,oneof"`
}
type Request_Prepare struct {
	Prepare *RequestPrepare `protobuf:"bytes,3,opt,name=prepare,oneof"`
}
type Request_Commit struct {
	Commit *RequestCommit `protobuf:"bytes,4,opt,name=commit,oneof"`
}
type Request_Checkpoint struct {
	Checkpoint *RequestCheckpoint `protobuf:"bytes,5,opt,name=checkpoint,oneof"`
}
type Request_Viewchange struct {
	Viewchange *RequestViewChange `protobuf:"bytes,6,opt,name=viewchange,oneof"`
}
type Request_Ack struct {
	Ack *RequestAck `protobuf:"bytes,7,opt,name=ack,oneof"`
}
type Request_Newview struct {
	Newview *RequestNewView `protobuf:"bytes,8,opt,name=newview,oneof"`
}
type Request_Reply struct {
	Reply *ClientReply `protobuf:"bytes,9,opt,name=reply,oneof"`
}

func (*Request_Client) isRequest_Value()     {}
func (*Request_Preprepare) isRequest_Value() {}
func (*Request_Prepare) isRequest_Value()    {}
func (*Request_Commit) isRequest_Value()     {}
func (*Request_Checkpoint) isRequest_Value() {}
func (*Request_Viewchange) isRequest_Value() {}
func (*Request_Ack) isRequest_Value()        {}
func (*Request_Newview) isRequest_Value()    {}
func (*Request_Reply) isRequest_Value()      {}

func (m *Request) GetValue() isRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Request) GetClient() *RequestClient {
	if x, ok := m.GetValue().(*Request_Client); ok {
		return x.Client
	}
	return nil
}

func (m *Request) GetPreprepare() *RequestPrePrepare {
	if x, ok := m.GetValue().(*Request_Preprepare); ok {
		return x.Preprepare
	}
	return nil
}

func (m *Request) GetPrepare() *RequestPrepare {
	if x, ok := m.GetValue().(*Request_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *Request) GetCommit() *RequestCommit {
	if x, ok := m.GetValue().(*Request_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Request) GetCheckpoint() *RequestCheckpoint {
	if x, ok := m.GetValue().(*Request_Checkpoint); ok {
		return x.Checkpoint
	}
	return nil
}

func (m *Request) GetViewchange() *RequestViewChange {
	if x, ok := m.GetValue().(*Request_Viewchange); ok {
		return x.Viewchange
	}
	return nil
}

func (m *Request) GetAck() *RequestAck {
	if x, ok := m.GetValue().(*Request_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *Request) GetNewview() *RequestNewView {
	if x, ok := m.GetValue().(*Request_Newview); ok {
		return x.Newview
	}
	return nil
}

func (m *Request) GetReply() *ClientReply {
	if x, ok := m.GetValue().(*Request_Reply); ok {
		return x.Reply
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_Client)(nil),
		(*Request_Preprepare)(nil),
		(*Request_Prepare)(nil),
		(*Request_Commit)(nil),
		(*Request_Checkpoint)(nil),
		(*Request_Viewchange)(nil),
		(*Request_Ack)(nil),
		(*Request_Newview)(nil),
		(*Request_Reply)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_Client:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Client); err != nil {
			return err
		}
	case *Request_Preprepare:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preprepare); err != nil {
			return err
		}
	case *Request_Prepare:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *Request_Commit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Request_Checkpoint:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Checkpoint); err != nil {
			return err
		}
	case *Request_Viewchange:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Viewchange); err != nil {
			return err
		}
	case *Request_Ack:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *Request_Newview:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Newview); err != nil {
			return err
		}
	case *Request_Reply:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reply); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Value has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // value.client
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestClient)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Client{msg}
		return true, err
	case 2: // value.preprepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestPrePrepare)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Preprepare{msg}
		return true, err
	case 3: // value.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestPrepare)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Prepare{msg}
		return true, err
	case 4: // value.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCommit)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Commit{msg}
		return true, err
	case 5: // value.checkpoint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCheckpoint)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Checkpoint{msg}
		return true, err
	case 6: // value.viewchange
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestViewChange)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Viewchange{msg}
		return true, err
	case 7: // value.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestAck)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Ack{msg}
		return true, err
	case 8: // value.newview
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestNewView)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Newview{msg}
		return true, err
	case 9: // value.reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientReply)
		err := b.DecodeMessage(msg)
		m.Value = &Request_Reply{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// value
	switch x := m.Value.(type) {
	case *Request_Client:
		s := proto.Size(x.Client)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Preprepare:
		s := proto.Size(x.Preprepare)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Checkpoint:
		s := proto.Size(x.Checkpoint)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Viewchange:
		s := proto.Size(x.Viewchange)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Ack:
		s := proto.Size(x.Ack)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Newview:
		s := proto.Size(x.Newview)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Reply:
		s := proto.Size(x.Reply)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RequestClient struct {
	Op        *BlockData `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	Timestamp string     `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    string     `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
}

func (m *RequestClient) Reset()                    { *m = RequestClient{} }
func (m *RequestClient) String() string            { return proto.CompactTextString(m) }
func (*RequestClient) ProtoMessage()               {}
func (*RequestClient) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *RequestClient) GetOp() *BlockData {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *RequestClient) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *RequestClient) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type RequestPrePrepare struct {
	View     uint64         `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence uint64         `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string         `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
	Request  *RequestClient `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
	Replica  uint64         `protobuf:"varint,5,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestPrePrepare) Reset()                    { *m = RequestPrePrepare{} }
func (m *RequestPrePrepare) String() string            { return proto.CompactTextString(m) }
func (*RequestPrePrepare) ProtoMessage()               {}
func (*RequestPrePrepare) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *RequestPrePrepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RequestPrePrepare) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RequestPrePrepare) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *RequestPrePrepare) GetRequest() *RequestClient {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RequestPrePrepare) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

type RequestPrepare struct {
	View     uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
	Replica  uint64 `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestPrepare) Reset()                    { *m = RequestPrepare{} }
func (m *RequestPrepare) String() string            { return proto.CompactTextString(m) }
func (*RequestPrepare) ProtoMessage()               {}
func (*RequestPrepare) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *RequestPrepare) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RequestPrepare) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RequestPrepare) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *RequestPrepare) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

type RequestCommit struct {
	View     uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,3,opt,name=digest" json:"digest,omitempty"`
	Replica  uint64 `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestCommit) Reset()                    { *m = RequestCommit{} }
func (m *RequestCommit) String() string            { return proto.CompactTextString(m) }
func (*RequestCommit) ProtoMessage()               {}
func (*RequestCommit) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *RequestCommit) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RequestCommit) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RequestCommit) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *RequestCommit) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

type RequestCheckpoint struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	Replica  uint64 `protobuf:"varint,3,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestCheckpoint) Reset()                    { *m = RequestCheckpoint{} }
func (m *RequestCheckpoint) String() string            { return proto.CompactTextString(m) }
func (*RequestCheckpoint) ProtoMessage()               {}
func (*RequestCheckpoint) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *RequestCheckpoint) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RequestCheckpoint) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *RequestCheckpoint) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

type RequestViewChange struct {
	View    uint64                  `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	H       uint64                  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Cset    []*RequestViewChange_C  `protobuf:"bytes,3,rep,name=cset" json:"cset,omitempty"`
	Pset    []*RequestViewChange_PQ `protobuf:"bytes,4,rep,name=pset" json:"pset,omitempty"`
	Qset    []*RequestViewChange_PQ `protobuf:"bytes,5,rep,name=qset" json:"qset,omitempty"`
	Replica uint64                  `protobuf:"varint,6,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestViewChange) Reset()                    { *m = RequestViewChange{} }
func (m *RequestViewChange) String() string            { return proto.CompactTextString(m) }
func (*RequestViewChange) ProtoMessage()               {}
func (*RequestViewChange) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *RequestViewChange) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RequestViewChange) GetH() uint64 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *RequestViewChange) GetCset() []*RequestViewChange_C {
	if m != nil {
		return m.Cset
	}
	return nil
}

func (m *RequestViewChange) GetPset() []*RequestViewChange_PQ {
	if m != nil {
		return m.Pset
	}
	return nil
}

func (m *RequestViewChange) GetQset() []*RequestViewChange_PQ {
	if m != nil {
		return m.Qset
	}
	return nil
}

func (m *RequestViewChange) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

type RequestViewChange_C struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
}

func (m *RequestViewChange_C) Reset()                    { *m = RequestViewChange_C{} }
func (m *RequestViewChange_C) String() string            { return proto.CompactTextString(m) }
func (*RequestViewChange_C) ProtoMessage()               {}
func (*RequestViewChange_C) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8, 0} }

func (m *RequestViewChange_C) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RequestViewChange_C) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type RequestViewChange_PQ struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence" json:"sequence,omitempty"`
	Digest   string `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	View     uint64 `protobuf:"varint,3,opt,name=view" json:"view,omitempty"`
}

func (m *RequestViewChange_PQ) Reset()                    { *m = RequestViewChange_PQ{} }
func (m *RequestViewChange_PQ) String() string            { return proto.CompactTextString(m) }
func (*RequestViewChange_PQ) ProtoMessage()               {}
func (*RequestViewChange_PQ) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8, 1} }

func (m *RequestViewChange_PQ) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *RequestViewChange_PQ) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *RequestViewChange_PQ) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

type PQset struct {
	Set []*RequestViewChange_PQ `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
}

func (m *PQset) Reset()                    { *m = PQset{} }
func (m *PQset) String() string            { return proto.CompactTextString(m) }
func (*PQset) ProtoMessage()               {}
func (*PQset) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *PQset) GetSet() []*RequestViewChange_PQ {
	if m != nil {
		return m.Set
	}
	return nil
}

// view: 需要变更的视图, replica: 发送该Ack的节点
// viewchangeSender: <view-change>的发送者
// digest: <view-change>的摘要
type RequestAck struct {
	View             uint64 `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Replica          uint64 `protobuf:"varint,2,opt,name=replica" json:"replica,omitempty"`
	ViewchangeSender uint64 `protobuf:"varint,3,opt,name=viewchangeSender" json:"viewchangeSender,omitempty"`
	Digest           string `protobuf:"bytes,4,opt,name=digest" json:"digest,omitempty"`
}

func (m *RequestAck) Reset()                    { *m = RequestAck{} }
func (m *RequestAck) String() string            { return proto.CompactTextString(m) }
func (*RequestAck) ProtoMessage()               {}
func (*RequestAck) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *RequestAck) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RequestAck) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *RequestAck) GetViewchangeSender() uint64 {
	if m != nil {
		return m.ViewchangeSender
	}
	return 0
}

func (m *RequestAck) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type RequestNewView struct {
	View    uint64               `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Vset    []*RequestViewChange `protobuf:"bytes,2,rep,name=vset" json:"vset,omitempty"`
	Xset    map[uint64]string    `protobuf:"bytes,3,rep,name=xset" json:"xset,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Replica uint64               `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
}

func (m *RequestNewView) Reset()                    { *m = RequestNewView{} }
func (m *RequestNewView) String() string            { return proto.CompactTextString(m) }
func (*RequestNewView) ProtoMessage()               {}
func (*RequestNewView) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *RequestNewView) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *RequestNewView) GetVset() []*RequestViewChange {
	if m != nil {
		return m.Vset
	}
	return nil
}

func (m *RequestNewView) GetXset() map[uint64]string {
	if m != nil {
		return m.Xset
	}
	return nil
}

func (m *RequestNewView) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

type ClientReply struct {
	View      uint64     `protobuf:"varint,1,opt,name=view" json:"view,omitempty"`
	Timestamp string     `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Client    string     `protobuf:"bytes,3,opt,name=client" json:"client,omitempty"`
	Replica   uint64     `protobuf:"varint,4,opt,name=replica" json:"replica,omitempty"`
	Result    *BlockData `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
}

func (m *ClientReply) Reset()                    { *m = ClientReply{} }
func (m *ClientReply) String() string            { return proto.CompactTextString(m) }
func (*ClientReply) ProtoMessage()               {}
func (*ClientReply) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *ClientReply) GetView() uint64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ClientReply) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *ClientReply) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *ClientReply) GetReplica() uint64 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *ClientReply) GetResult() *BlockData {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockData)(nil), "types.BlockData")
	proto.RegisterType((*Checkpoint)(nil), "types.Checkpoint")
	proto.RegisterType((*Request)(nil), "types.Request")
	proto.RegisterType((*RequestClient)(nil), "types.RequestClient")
	proto.RegisterType((*RequestPrePrepare)(nil), "types.RequestPrePrepare")
	proto.RegisterType((*RequestPrepare)(nil), "types.RequestPrepare")
	proto.RegisterType((*RequestCommit)(nil), "types.RequestCommit")
	proto.RegisterType((*RequestCheckpoint)(nil), "types.RequestCheckpoint")
	proto.RegisterType((*RequestViewChange)(nil), "types.RequestViewChange")
	proto.RegisterType((*RequestViewChange_C)(nil), "types.RequestViewChange.C")
	proto.RegisterType((*RequestViewChange_PQ)(nil), "types.RequestViewChange.PQ")
	proto.RegisterType((*PQset)(nil), "types.PQset")
	proto.RegisterType((*RequestAck)(nil), "types.RequestAck")
	proto.RegisterType((*RequestNewView)(nil), "types.RequestNewView")
	proto.RegisterType((*ClientReply)(nil), "types.ClientReply")
}

func init() { proto.RegisterFile("pbft.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x8d, 0xff, 0x24, 0x69, 0x26, 0xfd, 0xfd, 0x94, 0xae, 0x0a, 0xb2, 0x02, 0xa8, 0x95, 0x25,
	0xa4, 0xa8, 0x02, 0x47, 0x34, 0x12, 0x45, 0x3d, 0x41, 0x03, 0x52, 0x0e, 0x08, 0xa5, 0x8b, 0x84,
	0x10, 0x37, 0xc7, 0x5d, 0x12, 0x2b, 0x89, 0xed, 0xda, 0x9b, 0x86, 0x5c, 0xf8, 0x22, 0x9c, 0xf9,
	0x52, 0x5c, 0xb8, 0xf2, 0x31, 0xd0, 0xec, 0xae, 0x63, 0x5b, 0xb1, 0x05, 0x2a, 0x20, 0xe5, 0xe0,
	0xf5, 0xbc, 0x97, 0x99, 0x37, 0xf3, 0x3c, 0x36, 0x40, 0x34, 0xf9, 0xc8, 0x9d, 0x28, 0x0e, 0x79,
	0x48, 0xea, 0x7c, 0x13, 0xb1, 0xa4, 0xdb, 0x99, 0x2c, 0x42, 0x6f, 0xee, 0xcd, 0x5c, 0x3f, 0x90,
	0x01, 0xbb, 0x0f, 0xad, 0x0b, 0xbc, 0xf7, 0xd2, 0xe5, 0x2e, 0xb1, 0xa1, 0x7e, 0xe3, 0x2e, 0x56,
	0xcc, 0xd2, 0x8e, 0xb5, 0x5e, 0xfb, 0x74, 0xdf, 0x11, 0x2c, 0x47, 0x00, 0xa8, 0x0c, 0xd9, 0xcf,
	0x01, 0x86, 0x33, 0xe6, 0xcd, 0xa3, 0xd0, 0x0f, 0x38, 0xe9, 0xc2, 0x5e, 0xc2, 0xae, 0x57, 0x2c,
	0xf0, 0x24, 0xc9, 0xa4, 0xdb, 0x33, 0xb9, 0x0b, 0x8d, 0x2b, 0x7f, 0xca, 0x12, 0x6e, 0xe9, 0xc7,
	0x5a, 0xaf, 0x45, 0xd5, 0xc9, 0xfe, 0x6e, 0x40, 0x93, 0x22, 0x28, 0xe1, 0xc4, 0x81, 0x86, 0xb7,
	0xf0, 0x59, 0xc0, 0x55, 0xca, 0x43, 0x95, 0x52, 0xc5, 0x87, 0x22, 0x36, 0xaa, 0x51, 0x85, 0x22,
	0xe7, 0x00, 0x51, 0xcc, 0xf0, 0xe7, 0xc6, 0x4c, 0xfc, 0x6f, 0xfb, 0xd4, 0x2a, 0x72, 0xc6, 0x31,
	0x1b, 0xcb, 0xf8, 0xa8, 0x46, 0x73, 0x68, 0xf2, 0x04, 0x9a, 0x29, 0xd1, 0x10, 0xc4, 0x3b, 0x3b,
	0x44, 0xc5, 0x4a, 0x71, 0xa2, 0xbc, 0x70, 0xb9, 0xf4, 0xb9, 0x65, 0x96, 0x96, 0x27, 0x62, 0xa2,
	0x3c, 0x71, 0x85, 0xe5, 0x79, 0xdb, 0xe6, 0x58, 0xf5, 0xb2, 0xf2, 0xb2, 0xe6, 0x61, 0x79, 0x19,
	0x1a, 0xb9, 0x37, 0x3e, 0x5b, 0x7b, 0x33, 0x37, 0x98, 0x32, 0xab, 0x51, 0xc6, 0x7d, 0xe7, 0xb3,
	0xf5, 0x50, 0xc4, 0x91, 0x9b, 0xa1, 0xc9, 0x43, 0x30, 0x5c, 0x6f, 0x6e, 0x35, 0x05, 0xe9, 0xa0,
	0x48, 0x7a, 0xe1, 0xcd, 0x47, 0x35, 0x8a, 0x71, 0xec, 0x40, 0xc0, 0xd6, 0xc8, 0xb3, 0xf6, 0xca,
	0x3a, 0xf0, 0x86, 0xad, 0x31, 0x05, 0x76, 0x40, 0xe1, 0xc8, 0x09, 0xd4, 0x63, 0x16, 0x2d, 0x36,
	0x56, 0x4b, 0x10, 0x88, 0x22, 0xc8, 0xc1, 0x50, 0x8c, 0x8c, 0x6a, 0x54, 0x42, 0x2e, 0x9a, 0xca,
	0x3e, 0xf6, 0x14, 0xfe, 0x2b, 0x0c, 0x90, 0x1c, 0x83, 0x1e, 0x46, 0x6a, 0xc4, 0x9d, 0xbc, 0xab,
	0xd0, 0x76, 0x54, 0x0f, 0x23, 0x72, 0x1f, 0x5a, 0xdc, 0x5f, 0xb2, 0x84, 0xbb, 0xcb, 0x48, 0xf9,
	0x25, 0xbb, 0x81, 0x56, 0x52, 0x36, 0x31, 0xa4, 0x95, 0xe4, 0xc9, 0xfe, 0xaa, 0xc1, 0xc1, 0xce,
	0xd8, 0x09, 0x01, 0x53, 0x68, 0x94, 0x86, 0x14, 0xd7, 0x05, 0xa3, 0xea, 0x95, 0x46, 0x35, 0xf2,
	0x46, 0x25, 0x0e, 0x34, 0x63, 0xf9, 0xe7, 0x15, 0xe3, 0x97, 0x4d, 0x48, 0x41, 0xc4, 0x42, 0x7c,
	0xb4, 0xf0, 0x3d, 0x57, 0x8c, 0xde, 0xa4, 0xe9, 0xd1, 0x8e, 0xe1, 0xff, 0xa2, 0xc9, 0xfe, 0x5a,
	0x8d, 0xb9, 0x9c, 0x66, 0x31, 0xe7, 0x75, 0x36, 0x04, 0x69, 0xce, 0x7f, 0x9f, 0xd2, 0xdd, 0x4e,
	0xe3, 0xcf, 0x56, 0x44, 0x3e, 0x85, 0x51, 0x4c, 0xf1, 0x43, 0xdf, 0xe6, 0xc8, 0x9e, 0x86, 0x52,
	0x69, 0xfb, 0xa0, 0xcd, 0x94, 0x26, 0x6d, 0x46, 0x1c, 0x30, 0xbd, 0x84, 0xa1, 0x14, 0xa3, 0xd7,
	0x3e, 0xed, 0x56, 0x3d, 0x57, 0xce, 0x90, 0x0a, 0x1c, 0xe9, 0x83, 0x19, 0x21, 0xde, 0x14, 0xf8,
	0x7b, 0x95, 0xf8, 0xf1, 0x25, 0x15, 0x40, 0x24, 0x5c, 0x23, 0xa1, 0xfe, 0x1b, 0x04, 0x04, 0xe6,
	0x35, 0x36, 0x0a, 0x1a, 0xbb, 0x67, 0xa0, 0x0d, 0x6f, 0xd3, 0xb6, 0xee, 0x6b, 0xd0, 0xc7, 0x97,
	0xb7, 0x6a, 0x78, 0xda, 0x40, 0x23, 0x6b, 0xa0, 0xfd, 0x14, 0xea, 0xe3, 0x4b, 0xac, 0xf4, 0x31,
	0x18, 0xa8, 0x4c, 0xfb, 0xb5, 0x32, 0xc4, 0xd9, 0x9f, 0x01, 0xb2, 0xd5, 0x53, 0x3a, 0x9a, 0x9c,
	0x74, 0xbd, 0x20, 0x9d, 0x9c, 0x40, 0x27, 0x5b, 0x6b, 0x6f, 0x59, 0x70, 0xc5, 0x62, 0x55, 0xd3,
	0xce, 0xfd, 0x9c, 0x16, 0xb3, 0xf0, 0x7e, 0xf9, 0xa6, 0x6d, 0x9f, 0x36, 0xb5, 0xd0, 0x4a, 0x8b,
	0x78, 0x04, 0xe6, 0x0d, 0xca, 0xd2, 0x85, 0xac, 0xca, 0x4d, 0x4b, 0x05, 0x8a, 0x0c, 0xc0, 0xfc,
	0x94, 0xf9, 0xe7, 0xa8, 0x74, 0x6f, 0x3a, 0xef, 0x13, 0xc6, 0x5f, 0x05, 0x3c, 0xde, 0x50, 0x01,
	0xae, 0x7e, 0x52, 0xba, 0x67, 0xd0, 0xda, 0x82, 0x49, 0x07, 0x8c, 0x39, 0xdb, 0xa8, 0xe2, 0xf0,
	0x92, 0x1c, 0xa6, 0x2f, 0x62, 0x39, 0x25, 0x79, 0x38, 0xd7, 0x9f, 0x69, 0xf6, 0x17, 0x0d, 0xda,
	0xb9, 0xe5, 0x5b, 0xaa, 0xec, 0x56, 0xbb, 0xb4, 0xba, 0x58, 0xd2, 0x83, 0x46, 0xcc, 0x92, 0xd5,
	0x22, 0x7d, 0xa3, 0xed, 0x6e, 0x70, 0x15, 0xbf, 0x38, 0xfa, 0xf0, 0x60, 0xea, 0xf3, 0xd9, 0x6a,
	0xe2, 0x78, 0xe1, 0xb2, 0x3f, 0x18, 0x78, 0x41, 0x5f, 0x7c, 0x6c, 0x0c, 0x06, 0x7d, 0x41, 0x99,
	0x34, 0xc4, 0x57, 0xc7, 0xe0, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x94, 0x4e, 0x4a, 0x9c,
	0x08, 0x00, 0x00,
}
